<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.26.1@d747f6500b38ac4f7dfc5edbcae6e4b637d7add0">
  <file src="library/Mockery.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$demeterMockKey]]></code>
      <code><![CDATA[$newMockName]]></code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code><![CDATA[MustBe]]></code>
      <code><![CDATA[new MustBe($expected)]]></code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code><![CDATA[self::builtInTypes()]]></code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code><![CDATA[self::$_config === null]]></code>
      <code><![CDATA[self::$_generator === null]]></code>
      <code><![CDATA[self::$_loader === null]]></code>
    </DocblockTypeContradiction>
    <InternalMethod>
      <code><![CDATA[Reflector::isReservedWord($type)]]></code>
    </InternalMethod>
    <InvalidReturnStatement>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA['...']]></code>
      <code><![CDATA[self::getContainer()->mock(...$args)->shouldIgnoreMissing()]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[LegacyMockInterface&MockInterface&TSpy]]></code>
      <code><![CDATA[TArray]]></code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code><![CDATA[$container->getMocks()[$demeterMockKey] ?? null]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[self::getContainer()->fetchMock($name)]]></code>
      <code><![CDATA[self::getContainer()->mock(...$args)]]></code>
    </LessSpecificReturnStatement>
    <LessSpecificReturnType>
      <code><![CDATA[array<string, mixed>]]></code>
    </LessSpecificReturnType>
    <MissingClassConstType>
      <code><![CDATA[BLOCKS = 'Mockery_Forward_Blocks']]></code>
    </MissingClassConstType>
    <MissingClosureParamType>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$n]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$object]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[static function ($argument) use (&$reference) {]]></code>
      <code><![CDATA[static function ($method) use ($add) {]]></code>
      <code><![CDATA[static function ($n) use ($mock) {]]></code>
      <code><![CDATA[static function ($object, $nesting) {]]></code>
    </MissingClosureReturnType>
    <MissingReturnType>
      <code><![CDATA[registerFileForCleanUp]]></code>
      <code><![CDATA[setGenerator]]></code>
      <code><![CDATA[setLoader]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mockery_teardown]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$expectations]]></code>
      <code><![CDATA[$formatter($object, $nesting)]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$object]]></code>
      <code><![CDATA[$value]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$formattedArguments]]></code>
      <code><![CDATA[$k]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAssignment>
      <code><![CDATA[$argument[$key]]]></code>
      <code><![CDATA[$argument[$key]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code><![CDATA[$argument[$key]]]></code>
      <code><![CDATA[$argument[$key]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA[$cleanedProperties[$name]]]></code>
      <code><![CDATA[$expectations]]></code>
      <code><![CDATA[$formattedArguments[]]]></code>
      <code><![CDATA[$key]]></code>
      <code><![CDATA[$reference]]></code>
      <code><![CDATA[$v]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[ExpectationInterface]]></code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code><![CDATA[$argument]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$expectations]]></code>
      <code><![CDATA[$expectations]]></code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code><![CDATA[LegacyMockInterface&MockInterface&TInstanceMock]]></code>
      <code><![CDATA[LegacyMockInterface&MockInterface&TNamedMock]]></code>
      <code><![CDATA[self::getContainer()->mock(...$args)]]></code>
      <code><![CDATA[self::getContainer()->mock(...$args)]]></code>
    </MixedReturnTypeCoercion>
    <MoreSpecificReturnType>
      <code><![CDATA[LegacyMockInterface&MockInterface]]></code>
      <code><![CDATA[LegacyMockInterface&MockInterface&TMock]]></code>
      <code><![CDATA[null|(LegacyMockInterface&MockInterface&TFetchMock)]]></code>
      <code><![CDATA[null|(LegacyMockInterface&MockInterface&TMock)]]></code>
    </MoreSpecificReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$expectations]]></code>
    </NullableReturnStatement>
    <PossiblyInvalidArgument>
      <code><![CDATA[$name]]></code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidCast>
      <code><![CDATA[$name]]></code>
    </PossiblyInvalidCast>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullReference>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[mockery_getExpectationsFor]]></code>
    </PossiblyNullReference>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$args[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <PossiblyUndefinedMethod>
      <code><![CDATA[allows]]></code>
    </PossiblyUndefinedMethod>
    <PossiblyUnusedMethod>
      <code><![CDATA[andAnyOtherArgs]]></code>
      <code><![CDATA[instanceMock]]></code>
      <code><![CDATA[isBuiltInType]]></code>
      <code><![CDATA[resetContainer]]></code>
      <code><![CDATA[setContainer]]></code>
      <code><![CDATA[setGenerator]]></code>
    </PossiblyUnusedMethod>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$parentMock !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[\strpos($fqn, '\\')]]></code>
    </RiskyTruthyFalsyComparison>
    <UnresolvableInclude>
      <code><![CDATA[require $fileName]]></code>
    </UnresolvableInclude>
  </file>
  <file src="library/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegration.php">
    <InternalMethod>
      <code><![CDATA[addToAssertionCount]]></code>
    </InternalMethod>
    <MissingPropertyType>
      <code><![CDATA[$mockeryOpen]]></code>
    </MissingPropertyType>
    <MissingReturnType>
      <code><![CDATA[addMockeryExpectationsToAssertionCount]]></code>
      <code><![CDATA[checkMockeryExceptions]]></code>
      <code><![CDATA[closeMockery]]></code>
      <code><![CDATA[mockeryAssertPostConditions]]></code>
      <code><![CDATA[purgeMockeryContainer]]></code>
      <code><![CDATA[startMockery]]></code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[purgeMockeryContainer]]></code>
      <code><![CDATA[startMockery]]></code>
    </PossiblyUnusedMethod>
    <UndefinedAttributeClass>
      <code><![CDATA[After]]></code>
      <code><![CDATA[Before]]></code>
    </UndefinedAttributeClass>
    <UndefinedInterfaceMethod>
      <code><![CDATA[dismissed]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="library/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegrationAssertPostConditions.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function assertPostConditions(): void]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Adapter/Phpunit/MockeryTestCaseSetUp.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function setUp(): void]]></code>
      <code><![CDATA[protected function tearDown(): void]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Adapter/Phpunit/TestListener.php">
    <DeprecatedInterface>
      <code><![CDATA[TestListener]]></code>
    </DeprecatedInterface>
    <DeprecatedTrait>
      <code><![CDATA[TestListenerDefaultImplementation]]></code>
    </DeprecatedTrait>
    <MissingOverrideAttribute>
      <code><![CDATA[public function endTest(Test $test, float $time): void]]></code>
      <code><![CDATA[public function startTestSuite(TestSuite $suite): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$trait]]></code>
    </MissingPropertyType>
    <MixedMethodCall>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[startTestSuite]]></code>
    </MixedMethodCall>
  </file>
  <file src="library/Mockery/Adapter/Phpunit/TestListenerTrait.php">
    <DeprecatedClass>
      <code><![CDATA[Blacklist::addDirectory(dirname((new ReflectionClass(Mockery::class))->getFileName()))]]></code>
      <code><![CDATA[Blacklist::class]]></code>
      <code><![CDATA[new Blacklist()]]></code>
    </DeprecatedClass>
    <InternalClass>
      <code><![CDATA[BaseTestRunner::STATUS_PASSED]]></code>
      <code><![CDATA[new ExpectationFailedException(
            sprintf(
                "Mockery's expectations have not been verified. Make sure that \Mockery::close() is called at the end of the test. Consider using %s\MockeryPHPUnitIntegration or extending %s\MockeryTestCase.",
                __NAMESPACE__,
                __NAMESPACE__
            )
        )]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[addFailure]]></code>
      <code><![CDATA[getTestResultObject]]></code>
      <code><![CDATA[new ExpectationFailedException(
            sprintf(
                "Mockery's expectations have not been verified. Make sure that \Mockery::close() is called at the end of the test. Consider using %s\MockeryPHPUnitIntegration or extending %s\MockeryTestCase.",
                __NAMESPACE__,
                __NAMESPACE__
            )
        )]]></code>
    </InternalMethod>
    <MissingReturnType>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[startTestSuite]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[getBlacklistedDirectories]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[startTestSuite]]></code>
    </PossiblyUnusedMethod>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$result !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <UndefinedPropertyAssignment>
      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>
    </UndefinedPropertyAssignment>
    <UndefinedPropertyFetch>
      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>
    </UndefinedPropertyFetch>
  </file>
  <file src="library/Mockery/CompositeExpectation.php">
    <InvalidCast>
      <code><![CDATA[$expectation]]></code>
    </InvalidCast>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->_expectations]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$first->getMock()]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[LegacyMockInterface&MockInterface]]></code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code><![CDATA[$first->getMock()->shouldNotReceive(...$args)]]></code>
      <code><![CDATA[$first->getMock()->shouldReceive(...$args)]]></code>
      <code><![CDATA[$this->andReturn(...$args)]]></code>
    </LessSpecificReturnStatement>
    <MissingOverrideAttribute>
      <code><![CDATA[public function andReturn(...$args)]]></code>
      <code><![CDATA[public function andReturns(...$args)]]></code>
      <code><![CDATA[public function getMock()]]></code>
      <code><![CDATA[public function getOrderNumber()]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
    </MixedArgument>
    <MoreSpecificReturnType>
      <code><![CDATA[Expectation]]></code>
      <code><![CDATA[Expectation]]></code>
      <code><![CDATA[self]]></code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Configuration.php">
    <MissingPropertyType>
      <code><![CDATA[$_reflectionCacheEnabled]]></code>
    </MissingPropertyType>
    <MixedArgument>
      <code><![CDATA[$type]]></code>
      <code><![CDATA[Hamcrest_Matcher::class]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$type]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[bool]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->_reflectionCacheEnabled]]></code>
    </MixedReturnStatement>
    <PossiblyUndefinedVariable>
      <code><![CDATA[$classes]]></code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedMethod>
      <code><![CDATA[allowMockingMethodsUnnecessarily]]></code>
      <code><![CDATA[disableReflectionCache]]></code>
      <code><![CDATA[enableReflectionCache]]></code>
      <code><![CDATA[getDefaultMatcher]]></code>
      <code><![CDATA[getInternalClassMethodParamMap]]></code>
      <code><![CDATA[mockingMethodsUnnecessarilyAllowed]]></code>
      <code><![CDATA[resetInternalClassMethodParamMaps]]></code>
      <code><![CDATA[setInternalClassMethodParamMap]]></code>
    </PossiblyUnusedMethod>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->_internalClassParamMap]]></code>
      <code><![CDATA[$this->_internalClassParamMap]]></code>
    </PropertyTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code><![CDATA[(bool) $flag]]></code>
      <code><![CDATA[(bool) $flag]]></code>
    </RedundantCastGivenDocblockType>
    <UndefinedClass>
      <code><![CDATA[Hamcrest_Matcher]]></code>
    </UndefinedClass>
  </file>
  <file src="library/Mockery/Container.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$interfaces]]></code>
      <code><![CDATA[$type]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[$match === false]]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code><![CDATA[$argument]]></code>
    </InvalidArgument>
    <InvalidArrayOffset>
      <code><![CDATA[$mocks[$index]]]></code>
    </InvalidArrayOffset>
    <InvalidCast>
      <code><![CDATA[$argument]]></code>
    </InvalidCast>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->_mocks]]></code>
      <code><![CDATA[$this->_mocks]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->_mocks[$reference] ?? null]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[null|(LegacyMockInterface&TFetchMock)|(MockInterface&TFetchMock)]]></code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code><![CDATA[$mock]]></code>
    </LessSpecificReturnStatement>
    <LessSpecificReturnType>
      <code><![CDATA[array]]></code>
    </LessSpecificReturnType>
    <MissingClassConstType>
      <code><![CDATA[BLOCKS = Mockery::BLOCKS]]></code>
    </MissingClassConstType>
    <MissingThrowsDocblock>
      <code><![CDATA[_getInstance]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$constructorArgs]]></code>
      <code><![CDATA[$mockConfiguration]]></code>
      <code><![CDATA[$mockConfiguration]]></code>
      <code><![CDATA[$mockDefinition]]></code>
      <code><![CDATA[$quickDefinitions]]></code>
      <code><![CDATA[$quickDefinitions]]></code>
      <code><![CDATA[$quickDefinitions]]></code>
      <code><![CDATA[$quickDefinitions]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA[$arguments[]]]></code>
      <code><![CDATA[$blocks]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$exception]]></code>
      <code><![CDATA[$exceptions[]]]></code>
      <code><![CDATA[$mockConfiguration]]></code>
      <code><![CDATA[$mockDefinition]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[(LegacyMockInterface&TMockObject)|(MockInterface&TMockObject)]]></code>
      <code><![CDATA[class-string<TMock>]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[addBlackListedMethod]]></code>
      <code><![CDATA[addBlackListedMethods]]></code>
      <code><![CDATA[getClassName]]></code>
      <code><![CDATA[getMockConfiguration]]></code>
      <code><![CDATA[mockery_init]]></code>
      <code><![CDATA[new $internalMockName()]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[setMockOriginalDestructor]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$className]]></code>
      <code><![CDATA[$mocks[$index]]]></code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code><![CDATA[$exceptions]]></code>
      <code><![CDATA[array<Throwable>]]></code>
    </MixedReturnTypeCoercion>
    <MoreSpecificReturnType>
      <code><![CDATA[(TMock&MockInterface)|(TMock&LegacyMockInterface)]]></code>
    </MoreSpecificReturnType>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$parts[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <PossiblyUndefinedMethod>
      <code><![CDATA[mockery_thrownExceptions]]></code>
    </PossiblyUndefinedMethod>
    <PossiblyUnusedMethod>
      <code><![CDATA[instanceMock]]></code>
      <code><![CDATA[mockery_allocateOrder]]></code>
      <code><![CDATA[mockery_getCurrentOrder]]></code>
      <code><![CDATA[mockery_getGroups]]></code>
      <code><![CDATA[mockery_setGroup]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[int]]></code>
    </PossiblyUnusedReturnValue>
    <UndefinedInterfaceMethod>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[byDefault]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[byDefault]]></code>
    </UndefinedMagicMethod>
  </file>
  <file src="library/Mockery/CountValidator/AtLeast.php">
    <InvalidOperand>
      <code><![CDATA[$n]]></code>
      <code><![CDATA[$this->_limit]]></code>
    </InvalidOperand>
    <InvalidReturnType>
      <code><![CDATA[bool]]></code>
    </InvalidReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function isEligible($n)]]></code>
      <code><![CDATA[public function validate($n)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/CountValidator/AtMost.php">
    <InvalidOperand>
      <code><![CDATA[$n]]></code>
      <code><![CDATA[$this->_limit]]></code>
    </InvalidOperand>
    <InvalidReturnType>
      <code><![CDATA[bool]]></code>
    </InvalidReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function validate($n)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/CountValidator/CountValidatorAbstract.php">
    <MissingOverrideAttribute>
      <code><![CDATA[abstract public function validate($n);]]></code>
      <code><![CDATA[public function isEligible($n)]]></code>
    </MissingOverrideAttribute>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/CountValidator/CountValidatorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[isEligible]]></code>
      <code><![CDATA[validate]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/CountValidator/Exact.php">
    <InvalidOperand>
      <code><![CDATA[$n]]></code>
      <code><![CDATA[$this->_limit]]></code>
    </InvalidOperand>
    <InvalidReturnType>
      <code><![CDATA[bool]]></code>
    </InvalidReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function validate($n)]]></code>
    </MissingOverrideAttribute>
    <PossiblyNullOperand>
      <code><![CDATA[$this->_expectation->getExceptionMessage()]]></code>
    </PossiblyNullOperand>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$because]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="library/Mockery/Exception/BadMethodCallException.php">
    <MissingReturnType>
      <code><![CDATA[dismiss]]></code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[dismissed]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Exception/InvalidArgumentException.php">
    <UnusedClass>
      <code><![CDATA[InvalidArgumentException]]></code>
    </UnusedClass>
  </file>
  <file src="library/Mockery/Exception/InvalidCountException.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException('Illegal comparative for expected call counts set: ' . $comp);]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[getActualCount]]></code>
      <code><![CDATA[getExpectedCount]]></code>
      <code><![CDATA[getExpectedCountComparative]]></code>
      <code><![CDATA[getMethodName]]></code>
      <code><![CDATA[getMockName]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Exception/InvalidOrderException.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getActualOrder]]></code>
      <code><![CDATA[getExpectedOrder]]></code>
      <code><![CDATA[getMethodName]]></code>
      <code><![CDATA[getMockName]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Exception/NoMatchingExpectationException.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getActualArguments]]></code>
      <code><![CDATA[getMethodName]]></code>
      <code><![CDATA[getMockName]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Expectation.php">
    <DocblockTypeContradiction>
      <code><![CDATA[! is_int($index)]]></code>
      <code><![CDATA[$group === null]]></code>
      <code><![CDATA[$mock instanceof $mockClass]]></code>
      <code><![CDATA[is_int($limit)]]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code><![CDATA[$argsOrClosure]]></code>
    </InvalidArgument>
    <InvalidOperand>
      <code><![CDATA[$index]]></code>
    </InvalidOperand>
    <InvalidStringClass>
      <code><![CDATA[new $exception($message, $code, $previous)]]></code>
      <code><![CDATA[new $this->_countValidatorClass($this, $limit)]]></code>
    </InvalidStringClass>
    <LessSpecificReturnType>
      <code><![CDATA[self]]></code>
      <code><![CDATA[self]]></code>
    </LessSpecificReturnType>
    <MissingClassConstType>
      <code><![CDATA[ERROR_ZERO_INVOCATION = 'shouldNotReceive(), never(), times(0) chaining additional invocation count methods has been deprecated and will throw an exception in a future version of Mockery']]></code>
    </MissingClassConstType>
    <MissingClosureParamType>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[static function () use ($args) {]]></code>
      <code><![CDATA[static function (...$args) use ($index) {]]></code>
    </MissingClosureReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function andReturn(...$args)]]></code>
      <code><![CDATA[public function andReturns(...$args)]]></code>
      <code><![CDATA[public function getMock()]]></code>
      <code><![CDATA[public function getOrderNumber()]]></code>
    </MissingOverrideAttribute>
    <MissingParamType>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$exception]]></code>
      <code><![CDATA[$message]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[andThrows]]></code>
      <code><![CDATA[between]]></code>
      <code><![CDATA[getName]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[evaluate]]></code>
      <code><![CDATA[evaluate]]></code>
      <code><![CDATA[makeExpectationDefault]]></code>
      <code><![CDATA[mockery_validateOrder]]></code>
      <code><![CDATA[mockery_validateOrder]]></code>
      <code><![CDATA[throw new Exception(
                'Mock Objects not created from a loaded/existing class are incapable of passing method calls through to a parent class'
            );]]></code>
      <code><![CDATA[throw new InvalidArgumentException(
                'Invalid argument index supplied. Index must be a non-negative integer.'
            );]]></code>
      <code><![CDATA[throw new InvalidArgumentException(sprintf(
            'Call to %s with an invalid argument (%s), only array and closure are allowed',
            __METHOD__,
            $argsOrClosure
        ));]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$exception]]></code>
      <code><![CDATA[$groups]]></code>
      <code><![CDATA[$message]]></code>
      <code><![CDATA[$return]]></code>
      <code><![CDATA[$values]]></code>
      <code><![CDATA[func_get_args()]]></code>
      <code><![CDATA[func_get_args()]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$firstCorrespondingKey]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code><![CDATA[$groups[$group]]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$expectedArg]]></code>
      <code><![CDATA[$expectedArg]]></code>
      <code><![CDATA[$groups]]></code>
      <code><![CDATA[$lastExpectedArgument]]></code>
      <code><![CDATA[$newValidators[]]]></code>
      <code><![CDATA[$result]]></code>
      <code><![CDATA[$return]]></code>
      <code><![CDATA[$validator]]></code>
      <code><![CDATA[$validator]]></code>
      <code><![CDATA[$validator]]></code>
      <code><![CDATA[$value]]></code>
      <code><![CDATA[$values]]></code>
    </MixedAssignment>
    <MixedClone>
      <code><![CDATA[clone $validator]]></code>
    </MixedClone>
    <MixedFunctionCall>
      <code><![CDATA[array_shift($this->_closureQueue)(...$args)]]></code>
      <code><![CDATA[current($this->_closureQueue)(...$args)]]></code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code><![CDATA[bool]]></code>
      <code><![CDATA[int]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[isEligible]]></code>
      <code><![CDATA[mockery_allocateOrder]]></code>
      <code><![CDATA[mockery_allocateOrder]]></code>
      <code><![CDATA[mockery_getGroups]]></code>
      <code><![CDATA[mockery_setGroup]]></code>
      <code><![CDATA[validate]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$groups[$group]]]></code>
      <code><![CDATA[$ordering->mockery_allocateOrder()]]></code>
      <code><![CDATA[$result]]></code>
    </MixedReturnStatement>
    <PossiblyFalseArgument>
      <code><![CDATA[$firstCorrespondingKey]]></code>
    </PossiblyFalseArgument>
    <PossiblyInvalidFunctionCall>
      <code><![CDATA[current($this->_closureQueue)(...$args)]]></code>
    </PossiblyInvalidFunctionCall>
    <PossiblyNullArgument>
      <code><![CDATA[$group]]></code>
      <code><![CDATA[$group]]></code>
    </PossiblyNullArgument>
    <PossiblyNullFunctionCall>
      <code><![CDATA[array_shift($this->_closureQueue)(...$args)]]></code>
    </PossiblyNullFunctionCall>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUndefinedMethod>
      <code><![CDATA[mockery_isInstance]]></code>
    </PossiblyUndefinedMethod>
    <PossiblyUnusedMethod>
      <code><![CDATA[andReturnArg]]></code>
      <code><![CDATA[andReturnFalse]]></code>
      <code><![CDATA[andReturnNull]]></code>
      <code><![CDATA[andReturnSelf]]></code>
      <code><![CDATA[andReturnTrue]]></code>
      <code><![CDATA[andReturnUndefined]]></code>
      <code><![CDATA[andReturnUsing]]></code>
      <code><![CDATA[andThrowExceptions]]></code>
      <code><![CDATA[andThrows]]></code>
      <code><![CDATA[andYield]]></code>
      <code><![CDATA[because]]></code>
      <code><![CDATA[between]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[globally]]></code>
      <code><![CDATA[isCallCountConstrained]]></code>
      <code><![CDATA[isEligible]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[passthru]]></code>
      <code><![CDATA[set]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[withSomeOfArgs]]></code>
      <code><![CDATA[zeroOrMoreTimes]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code><![CDATA[$_returnValue]]></code>
    </PossiblyUnusedProperty>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[mixed]]></code>
      <code><![CDATA[self]]></code>
    </PossiblyUnusedReturnValue>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$argsOrClosure instanceof Closure]]></code>
    </RedundantConditionGivenDocblockType>
    <TooManyArguments>
      <code><![CDATA[mockery_validateOrder]]></code>
    </TooManyArguments>
    <UndefinedClass>
      <code><![CDATA[Hamcrest_Matcher]]></code>
    </UndefinedClass>
    <UndefinedInterfaceMethod>
      <code><![CDATA[mockery_callSubjectMethod]]></code>
      <code><![CDATA[mockery_returnValueForMethod]]></code>
    </UndefinedInterfaceMethod>
    <UnusedMethod>
      <code><![CDATA[isAndAnyOtherArgumentsMatcher]]></code>
    </UnusedMethod>
  </file>
  <file src="library/Mockery/ExpectationDirector.php">
    <MissingReturnType>
      <code><![CDATA[addExpectation]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw $exception;]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[verifyCall]]></code>
    </MixedMethodCall>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code><![CDATA[call]]></code>
      <code><![CDATA[getExpectationCount]]></code>
      <code><![CDATA[verify]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code><![CDATA[$_expectedOrder]]></code>
    </PossiblyUnusedProperty>
    <UndefinedInterfaceMethod>
      <code><![CDATA[isCallCountConstrained]]></code>
      <code><![CDATA[isEligible]]></code>
      <code><![CDATA[matchArgs]]></code>
      <code><![CDATA[matchArgs]]></code>
      <code><![CDATA[verify]]></code>
      <code><![CDATA[verify]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="library/Mockery/ExpectationInterface.php">
    <PossiblyUnusedReturnValue>
      <code><![CDATA[self]]></code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="library/Mockery/ExpectsHigherOrderMessage.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function __call($method, $args)]]></code>
    </MissingOverrideAttribute>
    <MixedInferredReturnType>
      <code><![CDATA[Expectation|ExpectationInterface|HigherOrderMessage]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$expectation->once()]]></code>
    </MixedReturnStatement>
    <UndefinedInterfaceMethod>
      <code><![CDATA[once]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[once]]></code>
    </UndefinedMagicMethod>
  </file>
  <file src="library/Mockery/Generator/CachingGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$this->cache]]></code>
    </MixedPropertyTypeCoercion>
    <MixedReturnStatement>
      <code><![CDATA[$this->cache[$hash] = $this->generator->generate($config)]]></code>
    </MixedReturnStatement>
  </file>
  <file src="library/Mockery/Generator/DefinedTargetClass.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[array_unique(
            array_merge(
                ['\AllowDynamicProperties'],
                array_map(
                    static function (ReflectionAttribute $attribute): string {
                        return '\\' . $attribute->getName();
                    },
                    $this->rfc->getAttributes()
                )
            )
        )]]></code>
    </LessSpecificReturnStatement>
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function getAttributes()]]></code>
      <code><![CDATA[public function getInterfaces()]]></code>
      <code><![CDATA[public function getMethods()]]></code>
      <code><![CDATA[public function getName()]]></code>
      <code><![CDATA[public function getNamespaceName()]]></code>
      <code><![CDATA[public function getShortName()]]></code>
      <code><![CDATA[public function hasInternalAncestor()]]></code>
      <code><![CDATA[public function implementsInterface($interface)]]></code>
      <code><![CDATA[public function inNamespace()]]></code>
      <code><![CDATA[public function isAbstract()]]></code>
      <code><![CDATA[public function isFinal()]]></code>
      <code><![CDATA[public static function factory($name, $alias = null)]]></code>
    </MissingOverrideAttribute>
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$interface]]></code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code><![CDATA[list<class-string>]]></code>
    </MoreSpecificReturnType>
  </file>
  <file src="library/Mockery/Generator/Generator.php">
    <MissingReturnType>
      <code><![CDATA[generate]]></code>
    </MissingReturnType>
  </file>
  <file src="library/Mockery/Generator/Method.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__call]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Generator/MockConfiguration.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$target]]></code>
      <code><![CDATA[$target]]></code>
      <code><![CDATA[$targetInterface]]></code>
      <code><![CDATA[$targetTrait]]></code>
      <code><![CDATA[$targets]]></code>
      <code><![CDATA[$this->targetClassName]]></code>
      <code><![CDATA['\\Iterator']]></code>
      <code><![CDATA['\\IteratorAggregate']]></code>
      <code><![CDATA['\\IteratorAggregate']]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$targets]]></code>
    </InvalidArgument>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->targetTraits]]></code>
      <code><![CDATA[array_unique($this->targetTraits)]]></code>
    </InvalidPropertyAssignmentValue>
    <LessSpecificReturnStatement>
      <code><![CDATA[$this->allMethods = $methods]]></code>
      <code><![CDATA[$this->targetInterfaces]]></code>
      <code><![CDATA[$this->targetInterfaces = array_unique($this->targetInterfaces)]]></code>
      <code><![CDATA[$this->targetTraits]]></code>
      <code><![CDATA[$this->targetTraits]]></code>
      <code><![CDATA[array_filter($methods, static function ($method) use ($whitelist) {
                if ($method->isAbstract()) {
                    return true;
                }

                return in_array(strtolower($method->getName()), $whitelist, true);
            })]]></code>
    </LessSpecificReturnStatement>
    <MissingPropertyType>
      <code><![CDATA[$blackListedMethods]]></code>
      <code><![CDATA[$constantsMap]]></code>
    </MissingPropertyType>
    <MissingReturnType>
      <code><![CDATA[addTarget]]></code>
      <code><![CDATA[addTargetInterfaceName]]></code>
      <code><![CDATA[addTargetTraitName]]></code>
      <code><![CDATA[addTargets]]></code>
      <code><![CDATA[setTargetClassName]]></code>
      <code><![CDATA[setTargetObject]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new Exception(
                    'The class ' . $this->targetClassName . ' is marked final and its methods'
                    . ' cannot be replaced. Classes marked final can be passed in'
                    . ' to \Mockery::mock() as instantiated objects to create a'
                    . ' partial mock, but only if the mock is not subject to type'
                    . ' hinting checks.'
                );]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$alias]]></code>
      <code><![CDATA[$alias]]></code>
      <code><![CDATA[$this->blackListedMethods]]></code>
      <code><![CDATA[$this->constantsMap]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$alias]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[array<string,scalar|array<scalar>>]]></code>
      <code><![CDATA[array<string>]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[addPart]]></code>
      <code><![CDATA[build]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->blackListedMethods]]></code>
      <code><![CDATA[$this->constantsMap]]></code>
    </MixedReturnStatement>
    <MoreSpecificReturnType>
      <code><![CDATA[list<Method>]]></code>
      <code><![CDATA[list<Method>]]></code>
      <code><![CDATA[list<TargetClassInterface>]]></code>
      <code><![CDATA[list<TargetClassInterface>]]></code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument>
      <code><![CDATA[$this->getName()]]></code>
      <code><![CDATA[$this->getName()]]></code>
    </PossiblyNullArgument>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$params[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <PossiblyUnusedMethod>
      <code><![CDATA[getParameterOverrides]]></code>
    </PossiblyUnusedMethod>
    <PropertyTypeCoercion>
      <code><![CDATA[$methods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="library/Mockery/Generator/MockConfigurationBuilder.php">
    <MissingParamType>
      <code><![CDATA[$whiteListedMethod]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[setInstanceMock]]></code>
      <code><![CDATA[setMockOriginalDestructor]]></code>
      <code><![CDATA[setName]]></code>
    </MissingReturnType>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->constantsMap]]></code>
      <code><![CDATA[$this->parameterOverrides]]></code>
      <code><![CDATA[$this->targets]]></code>
      <code><![CDATA[$this->whiteListedMethods]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$method]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[addBlackListedMethods]]></code>
      <code><![CDATA[addWhiteListedMethods]]></code>
      <code><![CDATA[setBlackListedMethods]]></code>
      <code><![CDATA[setMockOriginalDestructor]]></code>
      <code><![CDATA[setWhiteListedMethods]]></code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$name]]></code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code><![CDATA[array_diff($this->blackListedMethods, $this->php7SemiReservedKeywords)]]></code>
    </PropertyTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code><![CDATA[(bool) $instanceMock]]></code>
      <code><![CDATA[(bool) $mockDestructor]]></code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="library/Mockery/Generator/MockDefinition.php">
    <InvalidNullableReturnType>
      <code><![CDATA[string]]></code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code><![CDATA[$this->config->getName()]]></code>
    </NullableReturnStatement>
    <PossiblyUnusedMethod>
      <code><![CDATA[getConfig]]></code>
    </PossiblyUnusedMethod>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[! $config->getName()]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="library/Mockery/Generator/MockNameBuilder.php">
    <MissingReturnType>
      <code><![CDATA[addPart]]></code>
    </MissingReturnType>
  </file>
  <file src="library/Mockery/Generator/Parameter.php">
    <InvalidArgument>
      <code><![CDATA[false]]></code>
    </InvalidArgument>
    <InvalidOperand>
      <code><![CDATA[self::$parameterCounter++]]></code>
    </InvalidOperand>
    <InvalidReturnStatement>
      <code><![CDATA[class_exists($typeHint) ? DefinedTargetClass::factory($typeHint, false) : null]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[null|ReflectionClass]]></code>
    </InvalidReturnType>
    <PossiblyNullArgument>
      <code><![CDATA[$typeHint]]></code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code><![CDATA[__call]]></code>
      <code><![CDATA[getClass]]></code>
      <code><![CDATA[getTypeHintAsString]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/AvoidMethodClashPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/CallTypeHintPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/ClassAttributesPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/ClassNamePass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/ClassPass.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
    </ArgumentTypeCoercion>
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/ConstantsPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MixedAssignment>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
    <PossiblyInvalidIterator>
      <code><![CDATA[$cm[$name]]]></code>
    </PossiblyInvalidIterator>
    <PossiblyNullArgument>
      <code><![CDATA[$name]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php">
    <MissingClassConstType>
      <code><![CDATA[INSTANCE_MOCK_CODE = <<<MOCK

    protected \$_mockery_ignoreVerification = true;

    public function __construct()
    {
        \$this->_mockery_ignoreVerification = false;
        \$associatedRealObject = \Mockery::fetchMock(__CLASS__);

        foreach (get_object_vars(\$this) as \$attr => \$val) {
            if (\$attr !== "_mockery_ignoreVerification" && \$attr !== "_mockery_expectations") {
                \$this->\$attr = \$associatedRealObject->\$attr;
            }
        }

        \$directors = \$associatedRealObject->mockery_getExpectations();
        foreach (\$directors as \$method=>\$director) {
            // get the director method needed
            \$existingDirector = \$this->mockery_getExpectationsFor(\$method);
            if (!\$existingDirector) {
                \$existingDirector = new \Mockery\ExpectationDirector(\$method, \$this);
                \$this->mockery_setExpectationsFor(\$method, \$existingDirector);
            }
            \$expectations = \$director->getExpectations();
            foreach (\$expectations as \$expectation) {
                \$clonedExpectation = clone \$expectation;
                \$existingDirector->addExpectation(\$clonedExpectation);
            }
            \$defaultExpectations = \$director->getDefaultExpectations();
            foreach (array_reverse(\$defaultExpectations) as \$expectation) {
                \$clonedExpectation = clone \$expectation;
                \$existingDirector->addExpectation(\$clonedExpectation);
                \$existingDirector->makeExpectationDefault(\$clonedExpectation);
            }
        }
        \Mockery::getContainer()->rememberMock(\$this);

        \$this->_mockery_constructorCalled(func_get_args());
    }
MOCK]]></code>
    </MissingClassConstType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MissingParamType>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$code]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[appendToClass]]></code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$class]]></code>
    </MixedArgument>
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code><![CDATA[$code]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$this->appendToClass($code, static::INSTANCE_MOCK_CODE)]]></code>
    </MixedReturnStatement>
    <PossiblyFalseArgument>
      <code><![CDATA[$lastBrace]]></code>
    </PossiblyFalseArgument>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/InterfacePass.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$name]]></code>
    </ArgumentTypeCoercion>
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$i->getName()]]></code>
    </MixedArgument>
    <MixedMethodCall>
      <code><![CDATA[getName]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$code]]></code>
    </MixedOperand>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/MagicMethodTypeHintsPass.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->getDeclarationRegex($method->getName())]]></code>
      <code><![CDATA[$this->getDeclarationRegex($method->getName())]]></code>
      <code><![CDATA[$this->getDeclarationRegex($method->getName())]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code><![CDATA[$code]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[string]]></code>
    </InvalidReturnType>
    <LessSpecificReturnType>
      <code><![CDATA[array]]></code>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MissingReturnType>
      <code><![CDATA[renderTypeHint]]></code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$method]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$name]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$name]]></code>
      <code><![CDATA[$this->renderTypeHint($parameter)]]></code>
    </MixedOperand>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$matches[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/MethodDefinitionPass.php">
    <InvalidCast>
      <code><![CDATA[$param]]></code>
    </InvalidCast>
    <InvalidMethodCall>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[isPassedByReference]]></code>
    </InvalidMethodCall>
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MissingParamType>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$config]]></code>
      <code><![CDATA[$config]]></code>
      <code><![CDATA[$method]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[appendToClass]]></code>
      <code><![CDATA[renderMethodBody]]></code>
      <code><![CDATA[renderParams]]></code>
      <code><![CDATA[renderReturnType]]></code>
      <code><![CDATA[renderTypeHint]]></code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$class->getName()]]></code>
      <code><![CDATA[$method->getParameters()]]></code>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[strtolower($class->getName())][$method->getName()]]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$param]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code><![CDATA[$overrides[$class_name]]]></code>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[strtolower($class->getName())]]]></code>
      <code><![CDATA[$overrides[strtolower($class->getName())][$method->getName()]]]></code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$defaultValue]]></code>
      <code><![CDATA[$overrides]]></code>
      <code><![CDATA[$overrides]]></code>
      <code><![CDATA[$paramDef]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[getDeclaringClass]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getParameterOverrides]]></code>
      <code><![CDATA[getParameterOverrides]]></code>
      <code><![CDATA[getParameters]]></code>
      <code><![CDATA[getReturnType]]></code>
      <code><![CDATA[isStatic]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$paramDef]]></code>
      <code><![CDATA[$this->renderMethodBody($method, $config)]]></code>
      <code><![CDATA[$this->renderParams($method, $config)]]></code>
      <code><![CDATA[$this->renderReturnType($method)]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$code]]></code>
    </MixedReturnStatement>
    <PossiblyFalseArgument>
      <code><![CDATA[$lastBrace]]></code>
    </PossiblyFalseArgument>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$matches[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <RedundantIdentityWithTrue>
      <code><![CDATA[$param->isDefaultValueAvailable() !== false]]></code>
    </RedundantIdentityWithTrue>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$type]]></code>
    </RiskyTruthyFalsyComparison>
    <TypeDoesNotContainType>
      <code><![CDATA[strpos($param, '&') !== false]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/RemoveBuiltinMethodsThatAreFinalPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$methods]]></code>
    </MissingPropertyType>
    <MixedArgument>
      <code><![CDATA[$this->methods[$method->getName()]]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$this->methods[$method->getName()]]]></code>
    </MixedArrayAccess>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/RemoveDestructorPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/RemoveUnserializeForInternalSerializableClassesPass.php">
    <MissingClassConstType>
      <code><![CDATA[DUMMY_METHOD_DEFINITION = 'public function unserialize(string $data): void {} ']]></code>
      <code><![CDATA[DUMMY_METHOD_DEFINITION_LEGACY = 'public function unserialize($string) {} ']]></code>
    </MissingClassConstType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MissingParamType>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$code]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[appendToClass]]></code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$class]]></code>
    </MixedArgument>
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedOperand>
      <code><![CDATA[$code]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$this->appendToClass(
            $code,
            PHP_VERSION_ID < 80100 ? self::DUMMY_METHOD_DEFINITION_LEGACY : self::DUMMY_METHOD_DEFINITION
        )]]></code>
    </MixedReturnStatement>
    <PossiblyFalseArgument>
      <code><![CDATA[$lastBrace]]></code>
    </PossiblyFalseArgument>
  </file>
  <file src="library/Mockery/Generator/StringManipulation/Pass/TraitPass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Generator/StringManipulationGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
    </ArgumentTypeCoercion>
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(MockConfiguration $config)]]></code>
    </MissingOverrideAttribute>
    <MissingThrowsDocblock>
      <code><![CDATA[new MockDefinition($namedConfig, $code)]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[addPass]]></code>
    </PossiblyUnusedMethod>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[$config->getName()]]></code>
    </RiskyTruthyFalsyComparison>
    <UnsafeInstantiation>
      <code><![CDATA[new static([
            new CallTypeHintPass(),
            new MagicMethodTypeHintsPass(),
            new ClassPass(),
            new TraitPass(),
            new ClassNamePass(),
            new InstanceMockPass(),
            new InterfacePass(),
            new AvoidMethodClashPass(),
            new MethodDefinitionPass(),
            new RemoveUnserializeForInternalSerializableClassesPass(),
            new RemoveBuiltinMethodsThatAreFinalPass(),
            new RemoveDestructorPass(),
            new ConstantsPass(),
            new ClassAttributesPass(),
        ])]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="library/Mockery/Generator/TargetClassInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getShortName]]></code>
      <code><![CDATA[inNamespace]]></code>
      <code><![CDATA[isAbstract]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Generator/UndefinedTargetClass.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function getAttributes()]]></code>
      <code><![CDATA[public function getInterfaces()]]></code>
      <code><![CDATA[public function getMethods()]]></code>
      <code><![CDATA[public function getName()]]></code>
      <code><![CDATA[public function getNamespaceName()]]></code>
      <code><![CDATA[public function getShortName()]]></code>
      <code><![CDATA[public function hasInternalAncestor()]]></code>
      <code><![CDATA[public function implementsInterface($interface)]]></code>
      <code><![CDATA[public function inNamespace()]]></code>
      <code><![CDATA[public function isAbstract()]]></code>
      <code><![CDATA[public function isFinal()]]></code>
      <code><![CDATA[public static function factory($name)]]></code>
    </MissingOverrideAttribute>
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$interface]]></code>
    </MoreSpecificImplementedParamType>
  </file>
  <file src="library/Mockery/HigherOrderMessage.php">
    <MissingParamType>
      <code><![CDATA[$method]]></code>
    </MissingParamType>
    <MixedAssignment>
      <code><![CDATA[$expectation]]></code>
      <code><![CDATA[$this->method]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[Expectation|ExpectationInterface|HigherOrderMessage]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[withArgs]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$expectation->withArgs($args)]]></code>
      <code><![CDATA[$this->mock->{$this->method}($method, $args)]]></code>
    </MixedReturnStatement>
  </file>
  <file src="library/Mockery/Instantiator.php">
    <LessSpecificReturnType>
      <code><![CDATA[Closure]]></code>
    </LessSpecificReturnType>
    <MissingClosureReturnType>
      <code><![CDATA[static function () use ($serializedString) {]]></code>
    </MissingClosureReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[attemptInstantiationViaUnSerialization]]></code>
      <code><![CDATA[getReflectionClass]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[static function ($code, $message, $file, $line) use ($reflectionClass, &$error): void {
            $msg = sprintf(
                'Could not produce an instance of "%s" via un-serialization, since an error was triggered in file "%s" at line "%d"',
                $reflectionClass->getName(),
                $file,
                $line
            );

            $error = new UnexpectedValueException($msg, 0, new Exception($message, $code));
        }]]></code>
    </MixedArgument>
    <MixedInferredReturnType>
      <code><![CDATA[TClass]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->buildFactory($className)()]]></code>
    </MixedReturnStatement>
    <UndefinedVariable>
      <code><![CDATA[$error]]></code>
      <code><![CDATA[$error]]></code>
    </UndefinedVariable>
    <UnusedMethod>
      <code><![CDATA[hasInternalAncestors]]></code>
    </UnusedMethod>
  </file>
  <file src="library/Mockery/LegacyMockInterface.php">
    <InvalidParamDefault>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
    </InvalidParamDefault>
    <PossiblyUnusedMethod>
      <code><![CDATA[mockery_allocateOrder]]></code>
      <code><![CDATA[mockery_findExpectation]]></code>
      <code><![CDATA[mockery_getCurrentOrder]]></code>
      <code><![CDATA[mockery_getGroups]]></code>
      <code><![CDATA[mockery_getMockableProperties]]></code>
      <code><![CDATA[mockery_init]]></code>
      <code><![CDATA[mockery_setGroup]]></code>
      <code><![CDATA[shouldAllowMockingMethod]]></code>
      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>
      <code><![CDATA[shouldDeferMissing]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[int]]></code>
      <code><![CDATA[null|ExpectationDirector]]></code>
      <code><![CDATA[self]]></code>
    </PossiblyUnusedReturnValue>
  </file>
  <file src="library/Mockery/Loader/EvalLoader.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function load(MockDefinition $definition)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Loader/RequireLoader.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function load(MockDefinition $definition)]]></code>
    </MissingOverrideAttribute>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[glob($this->path . DIRECTORY_SEPARATOR . 'Mockery_*.php')]]></code>
    </RiskyTruthyFalsyComparison>
  </file>
  <file src="library/Mockery/Matcher/AndAnyOtherArgs.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/Any.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/AnyArgs.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/AnyOf.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidArgument>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidArgument>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/Closure.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidFunctionCall>
      <code><![CDATA[($this->_expected)($actual)]]></code>
    </InvalidFunctionCall>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/Contains.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$actual]]></code>
    </MixedArgumentTypeCoercion>
    <UndefinedClass>
      <code><![CDATA[$this->_expected]]></code>
      <code><![CDATA[$this->_expected]]></code>
    </UndefinedClass>
  </file>
  <file src="library/Mockery/Matcher/Ducktype.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidArgument>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidArgument>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
    <UndefinedClass>
      <code><![CDATA[$this->_expected]]></code>
    </UndefinedClass>
  </file>
  <file src="library/Mockery/Matcher/HasKey.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidArgument>
      <code><![CDATA[$this->_expected]]></code>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidArgument>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/HasValue.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidCast>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidCast>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/IsEqual.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/IsSame.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/MatcherAbstract.php">
    <MixedPropertyTypeCoercion>
      <code><![CDATA[$expected]]></code>
    </MixedPropertyTypeCoercion>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <UndefinedDocblockClass>
      <code><![CDATA[TExpected]]></code>
      <code><![CDATA[protected $_expected = null;]]></code>
    </UndefinedDocblockClass>
  </file>
  <file src="library/Mockery/Matcher/MultiArgumentClosure.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidFunctionCall>
      <code><![CDATA[($this->_expected)(...$actual)]]></code>
    </InvalidFunctionCall>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/MustBe.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/NoArgs.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$actual]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="library/Mockery/Matcher/Not.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/NotAnyOf.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
    <UndefinedClass>
      <code><![CDATA[$this->_expected]]></code>
    </UndefinedClass>
  </file>
  <file src="library/Mockery/Matcher/Pattern.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidArgument>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidArgument>
    <InvalidCast>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidCast>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/Mockery/Matcher/Subset.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <InvalidOperand>
      <code><![CDATA[$k]]></code>
    </InvalidOperand>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$strict]]></code>
    </MissingPropertyType>
    <MixedAssignment>
      <code><![CDATA[$v]]></code>
    </MixedAssignment>
    <UnsafeInstantiation>
      <code><![CDATA[new static($expected, false)]]></code>
      <code><![CDATA[new static($expected, true)]]></code>
    </UnsafeInstantiation>
  </file>
  <file src="library/Mockery/Matcher/Type.php">
    <DeprecatedClass>
      <code><![CDATA[MatcherAbstract]]></code>
    </DeprecatedClass>
    <DocblockTypeContradiction>
      <code><![CDATA[$this->_expected === 'real']]></code>
      <code><![CDATA[$this->_expected === 'real']]></code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code><![CDATA[$this->_expected]]></code>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidArgument>
    <InvalidCast>
      <code><![CDATA[$this->_expected]]></code>
    </InvalidCast>
    <MissingOverrideAttribute>
      <code><![CDATA[public function match(&$actual)]]></code>
    </MissingOverrideAttribute>
    <MixedInferredReturnType>
      <code><![CDATA[bool]]></code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$function($actual)]]></code>
    </MixedReturnStatement>
    <NoValue>
      <code><![CDATA[$this->_expected]]></code>
    </NoValue>
    <PossiblyInvalidCast>
      <code><![CDATA[$this->_expected]]></code>
    </PossiblyInvalidCast>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA['is_' . strtolower($this->_expected)]]></code>
      <code><![CDATA[is_string($this->_expected)]]></code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType>
      <code><![CDATA[function_exists($function)]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="library/Mockery/MethodCall.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[getArgs]]></code>
      <code><![CDATA[getMethod]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Mock.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$returnType]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[$method === null]]></code>
      <code><![CDATA[$method === null]]></code>
    </DocblockTypeContradiction>
    <InvalidOperand>
      <code><![CDATA[$order]]></code>
      <code><![CDATA[$this->_mockery_currentOrder]]></code>
    </InvalidOperand>
    <InvalidReturnStatement>
      <code><![CDATA[$director]]></code>
      <code><![CDATA[new HigherOrderMessage($this, 'shouldHaveReceived')]]></code>
      <code><![CDATA[new HigherOrderMessage($this, 'shouldNotHaveReceived')]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
    </InvalidReturnType>
    <LessSpecificImplementedReturnType>
      <code><![CDATA[array]]></code>
    </LessSpecificImplementedReturnType>
    <MissingClosureParamType>
      <code><![CDATA[$method]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[static function ($method) {]]></code>
      <code><![CDATA[static function () {]]></code>
    </MissingClosureReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function allows($something = [])]]></code>
      <code><![CDATA[public function byDefault()]]></code>
      <code><![CDATA[public function expects($something = null)]]></code>
      <code><![CDATA[public function makePartial()]]></code>
      <code><![CDATA[public function mockery_allocateOrder()]]></code>
      <code><![CDATA[public function mockery_findExpectation($method, array $args)]]></code>
      <code><![CDATA[public function mockery_getContainer()]]></code>
      <code><![CDATA[public function mockery_getCurrentOrder()]]></code>
      <code><![CDATA[public function mockery_getExpectationCount()]]></code>
      <code><![CDATA[public function mockery_getExpectationsFor($method)]]></code>
      <code><![CDATA[public function mockery_getGroups()]]></code>
      <code><![CDATA[public function mockery_getMockableMethods()]]></code>
      <code><![CDATA[public function mockery_getMockableProperties()]]></code>
      <code><![CDATA[public function mockery_getName()]]></code>
      <code><![CDATA[public function mockery_init(?Container $container = null, $partialObject = null, $instanceMock = true)]]></code>
      <code><![CDATA[public function mockery_isAnonymous()]]></code>
      <code><![CDATA[public function mockery_setCurrentOrder($order)]]></code>
      <code><![CDATA[public function mockery_setExpectationsFor($method, ExpectationDirector $director)]]></code>
      <code><![CDATA[public function mockery_setGroup($group, $order)]]></code>
      <code><![CDATA[public function mockery_teardown()]]></code>
      <code><![CDATA[public function mockery_validateOrder($method, $order)]]></code>
      <code><![CDATA[public function mockery_verify()]]></code>
      <code><![CDATA[public function shouldAllowMockingMethod($method)]]></code>
      <code><![CDATA[public function shouldAllowMockingProtectedMethods()]]></code>
      <code><![CDATA[public function shouldDeferMissing()]]></code>
      <code><![CDATA[public function shouldHaveBeenCalled()]]></code>
      <code><![CDATA[public function shouldHaveReceived($method = null, $args = null)]]></code>
      <code><![CDATA[public function shouldIgnoreMissing($returnValue = null, $recursive = false)]]></code>
      <code><![CDATA[public function shouldNotHaveBeenCalled(?array $args = null)]]></code>
      <code><![CDATA[public function shouldNotHaveReceived($method = null, $args = null)]]></code>
      <code><![CDATA[public function shouldNotReceive(...$methodNames)]]></code>
      <code><![CDATA[public function shouldReceive(...$methodNames)]]></code>
    </MissingOverrideAttribute>
    <MissingParamType>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$name]]></code>
      <code><![CDATA[$name]]></code>
    </MissingParamType>
    <MissingPropertyType>
      <code><![CDATA[$_mockery_allowMockingProtectedMethods]]></code>
      <code><![CDATA[$_mockery_instanceMock]]></code>
      <code><![CDATA[$_mockery_receivedMethodCalls]]></code>
    </MissingPropertyType>
    <MissingReturnType>
      <code><![CDATA[_mockery_constructorCalled]]></code>
      <code><![CDATA[_mockery_findExpectedMethodHandler]]></code>
      <code><![CDATA[_mockery_getReceivedMethodCalls]]></code>
      <code><![CDATA[_mockery_handleMethodCall]]></code>
      <code><![CDATA[_mockery_handleStaticMethodCall]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[hasMethodOverloadingInParentClass]]></code>
      <code><![CDATA[mockery_getExpectations]]></code>
      <code><![CDATA[mockery_getMethod]]></code>
      <code><![CDATA[mockery_isInstance]]></code>
    </MissingReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw $bmce;]]></code>
      <code><![CDATA[throw $e;]]></code>
      <code><![CDATA[throw new BadMethodCallException(
                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method
                . '() does not exist on this mock object',
                0,
                $badMethodCallException
            );]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$name]]></code>
      <code><![CDATA[$rm]]></code>
      <code><![CDATA[$this->_mockery_getReceivedMethodCalls()]]></code>
      <code><![CDATA[$this->_mockery_getReceivedMethodCalls()]]></code>
    </MixedArgument>
    <MixedArrayOffset>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_groups[$group]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$allowMockingProtectedMethods]]></code>
      <code><![CDATA[$count]]></code>
      <code><![CDATA[$director]]></code>
      <code><![CDATA[$director]]></code>
      <code><![CDATA[$director]]></code>
      <code><![CDATA[$director]]></code>
      <code><![CDATA[$exp]]></code>
      <code><![CDATA[$exps]]></code>
      <code><![CDATA[$handler]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$prototype]]></code>
      <code><![CDATA[$returnValue]]></code>
      <code><![CDATA[$rm]]></code>
      <code><![CDATA[$rm]]></code>
      <code><![CDATA[$rm]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[ExpectationDirector|null]]></code>
      <code><![CDATA[ExpectationInterface|Expectation|ExpectsHigherOrderMessage]]></code>
      <code><![CDATA[Expectation|null]]></code>
      <code><![CDATA[int]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[call]]></code>
      <code><![CDATA[findExpectation]]></code>
      <code><![CDATA[getExpectationCount]]></code>
      <code><![CDATA[getExpectations]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[getPrototype]]></code>
      <code><![CDATA[isAbstract]]></code>
      <code><![CDATA[isAbstract]]></code>
      <code><![CDATA[isPrivate]]></code>
      <code><![CDATA[isProtected]]></code>
      <code><![CDATA[isProtected]]></code>
      <code><![CDATA[isProtected]]></code>
      <code><![CDATA[isPublic]]></code>
      <code><![CDATA[isPublic]]></code>
      <code><![CDATA[push]]></code>
      <code><![CDATA[verify]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$count]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
    </MixedOperand>
    <MixedReturnStatement>
      <code><![CDATA[$count]]></code>
      <code><![CDATA[$director->findExpectation($args)]]></code>
      <code><![CDATA[$this->__call('__toString', [])]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->shouldReceive($something)->once()]]></code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code><![CDATA[$this->_mockery_mockableMethods]]></code>
      <code><![CDATA[string[]]]></code>
    </MixedReturnTypeCoercion>
    <NullableReturnStatement>
      <code><![CDATA[null]]></code>
    </NullableReturnStatement>
    <PossiblyInvalidDocblockTag>
      <code><![CDATA[@var array $args]]></code>
      <code><![CDATA[@var string $method]]></code>
      <code><![CDATA[@var string $method]]></code>
      <code><![CDATA[@var string $method]]></code>
    </PossiblyInvalidDocblockTag>
    <PossiblyNullOperand>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
    </PossiblyNullOperand>
    <PossiblyNullPropertyAssignmentValue>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
      <code><![CDATA[null]]></code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullReference>
      <code><![CDATA[__call]]></code>
      <code><![CDATA[mockery_getName]]></code>
    </PossiblyNullReference>
    <PossiblyUnusedMethod>
      <code><![CDATA[__callStatic]]></code>
      <code><![CDATA[_mockery_constructorCalled]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[mockery_callSubjectMethod]]></code>
      <code><![CDATA[mockery_getExpectations]]></code>
      <code><![CDATA[mockery_isInstance]]></code>
      <code><![CDATA[mockery_thrownExceptions]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code><![CDATA[$_mockery_name]]></code>
    </PossiblyUnusedProperty>
    <PossiblyUnusedReturnValue>
      <code><![CDATA[ExpectationDirector|null]]></code>
    </PossiblyUnusedReturnValue>
    <RedundantCondition>
      <code><![CDATA[$i->getName() !== 'Stringable']]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[!is_null($this->_mockery_partial)]]></code>
      <code><![CDATA[$this->_mockery_partial !== null]]></code>
    </RedundantConditionGivenDocblockType>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[!$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
      <code><![CDATA[$this->_mockery_parentClass]]></code>
    </RiskyTruthyFalsyComparison>
    <TooManyArguments>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
    </TooManyArguments>
    <UndefinedInterfaceMethod>
      <code><![CDATA[never]]></code>
      <code><![CDATA[once]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[once]]></code>
    </UndefinedMagicMethod>
    <UndefinedThisPropertyFetch>
      <code><![CDATA[$this->_mockery_ignoreVerification]]></code>
    </UndefinedThisPropertyFetch>
  </file>
  <file src="library/Mockery/QuickDefinitionsConfiguration.php">
    <MissingClassConstType>
      <code><![CDATA[QUICK_DEFINITIONS_MODE_DEFAULT_EXPECTATION = 'QUICK_DEFINITIONS_MODE_DEFAULT_EXPECTATION']]></code>
      <code><![CDATA[QUICK_DEFINITIONS_MODE_MOCK_AT_LEAST_ONCE = 'QUICK_DEFINITIONS_MODE_MOCK_AT_LEAST_ONCE']]></code>
    </MissingClassConstType>
  </file>
  <file src="library/Mockery/ReceivedMethodCalls.php">
    <MissingPropertyType>
      <code><![CDATA[$methodCalls]]></code>
    </MissingPropertyType>
    <MissingReturnType>
      <code><![CDATA[push]]></code>
      <code><![CDATA[verify]]></code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$methodCall->getArgs()]]></code>
      <code><![CDATA[$methodCall->getArgs()]]></code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$this->methodCalls[]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code><![CDATA[$methodCall]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[getArgs]]></code>
      <code><![CDATA[getArgs]]></code>
      <code><![CDATA[getMethod]]></code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code><![CDATA[push]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/Reflector.php">
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MissingClassConstType>
      <code><![CDATA[BUILTIN_TYPES = ['array', 'bool', 'int', 'float', 'null', 'object', 'string']]]></code>
      <code><![CDATA[ITERABLE = ['iterable']]]></code>
      <code><![CDATA[RESERVED_WORDS = ['bool', 'true', 'false', 'float', 'int', 'iterable', 'mixed', 'never', 'null', 'object', 'string', 'void']]]></code>
      <code><![CDATA[TRAVERSABLE_ARRAY = ['\Traversable', 'array']]]></code>
    </MissingClassConstType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new InvalidArgumentException('Unknown ReflectionType: ' . get_debug_type($type));]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$typeHint]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$typeHint]]></code>
    </MixedAssignment>
    <MixedReturnTypeCoercion>
      <code><![CDATA[[
                [
                    'typeHint' => $typeHint,
                    'isPrimitive' => in_array($typeHint, self::BUILTIN_TYPES, true),
                ],
            ]]]></code>
      <code><![CDATA[list<array{typeHint:string,isPrimitive:bool}>]]></code>
    </MixedReturnTypeCoercion>
    <PossiblyNullArgument>
      <code><![CDATA[$declaringClass]]></code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code><![CDATA[! $type instanceof ReflectionType && method_exists($method, 'getTentativeReturnType')]]></code>
      <code><![CDATA[! $type instanceof ReflectionType && method_exists($method, 'getTentativeReturnType')]]></code>
    </RedundantCondition>
    <UndefinedMethod>
      <code><![CDATA[getName]]></code>
      <code><![CDATA[isBuiltin]]></code>
    </UndefinedMethod>
  </file>
  <file src="library/Mockery/Undefined.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__call]]></code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedParam>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$method]]></code>
    </PossiblyUnusedParam>
  </file>
  <file src="library/Mockery/VerificationDirector.php">
    <MissingReturnType>
      <code><![CDATA[verify]]></code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[between]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[withAnyArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="library/Mockery/VerificationExpectation.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function __clone()]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="library/helpers.php">
    <LessSpecificReturnType>
      <code><![CDATA[((LegacyMockInterface&TMixed)|(MockInterface&TMixed))]]></code>
      <code><![CDATA[((LegacyMockInterface&TMixed)|(MockInterface&TMixed))]]></code>
      <code><![CDATA[LegacyMockInterface|MockInterface]]></code>
    </LessSpecificReturnType>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$args]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="tests/Bootstrap.php">
    <ForbiddenCode>
      <code><![CDATA[\var_dump(\func_get_args())]]></code>
    </ForbiddenCode>
    <LessSpecificReturnType>
      <code><![CDATA[void]]></code>
    </LessSpecificReturnType>
    <MissingParamType>
      <code><![CDATA[$path]]></code>
    </MissingParamType>
    <MissingReturnType>
      <code><![CDATA[isAbsolutePath]]></code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$path]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$path[0]]]></code>
    </MixedArrayAccess>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$trace[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <RiskyTruthyFalsyComparison>
      <code><![CDATA[\getenv('COMPOSER_VENDOR_DIR')]]></code>
    </RiskyTruthyFalsyComparison>
    <TypeDoesNotContainType>
      <code><![CDATA[$dev]]></code>
      <code><![CDATA[$dev]]></code>
    </TypeDoesNotContainType>
    <UncaughtThrowInGlobalScope>
      <code><![CDATA[throw new Exception(
        'Please run "php composer.phar install" in root directory '
        . 'to setup unit test dependencies before running the tests'
    );]]></code>
    </UncaughtThrowInGlobalScope>
    <UnresolvableInclude>
      <code><![CDATA[require_once $hamcrestPath]]></code>
    </UnresolvableInclude>
  </file>
  <file src="tests/Unit/AbstractTestCase.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$exception]]></code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf($class, \mock($class))]]></code>
      <code><![CDATA[self::assertInstanceOf($class, \mock($class))]]></code>
      <code><![CDATA[self::assertInstanceOf($class, \mock($class))]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[assertInvalidMock]]></code>
      <code><![CDATA[assertValidMock]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="tests/Unit/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegrationTest.php">
    <MixedAssignment>
      <code><![CDATA[$test]]></code>
      <code><![CDATA[$test]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[finish]]></code>
      <code><![CDATA[finish]]></code>
      <code><![CDATA[markAsRisky]]></code>
      <code><![CDATA[markAsRisky]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code><![CDATA[foobar]]></code>
      <code><![CDATA[foobar]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockeryPHPUnitIntegrationTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Adapter/Phpunit/PhpUnitConstraintExpectationTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::markTestSkipped('TODO: Constraint exception message')]]></code>
      <code><![CDATA[self::markTestSkipped('TODO: Constraint exception message')]]></code>
      <code><![CDATA[toString]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <UndefinedClass>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </UndefinedClass>
    <UnusedClass>
      <code><![CDATA[PhpUnitConstraintExpectationTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Adapter/Phpunit/TestListenerTest.php">
    <DeprecatedClass>
      <code><![CDATA[Blacklist::class]]></code>
      <code><![CDATA[new Blacklist()]]></code>
      <code><![CDATA[new Blacklist()]]></code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code><![CDATA[addListener]]></code>
    </DeprecatedMethod>
    <InternalClass>
      <code><![CDATA[new TestResult()]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[addListener]]></code>
      <code><![CDATA[new EmptyTestCase()]]></code>
      <code><![CDATA[setTestResultObject]]></code>
      <code><![CDATA[wasSuccessful]]></code>
    </InternalMethod>
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$container]]></code>
      <code><![CDATA[$listener]]></code>
      <code><![CDATA[$test]]></code>
      <code><![CDATA[$testResult]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[isBlacklisted]]></code>
      <code><![CDATA[isBlacklisted]]></code>
      <code><![CDATA[self::assertArrayNotHasKey(Mockery::class, Blacklist::$blacklistedClassNames)]]></code>
      <code><![CDATA[self::assertArrayNotHasKey(Mockery::class, Blacklist::$blacklistedClassNames)]]></code>
      <code><![CDATA[self::assertArrayNotHasKey(Mockery::class, Blacklist::$blacklistedClassNames)]]></code>
      <code><![CDATA[self::assertFalse(
                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())
            )]]></code>
      <code><![CDATA[self::assertFalse(
                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())
            )]]></code>
      <code><![CDATA[self::assertFalse($this->testResult->wasSuccessful(), 'expected test result to indicate failure')]]></code>
      <code><![CDATA[self::assertFalse($this->testResult->wasSuccessful(), 'expected test result to indicate failure')]]></code>
      <code><![CDATA[self::assertSame(1, Blacklist::$blacklistedClassNames[Mockery::class])]]></code>
      <code><![CDATA[self::assertSame(1, Blacklist::$blacklistedClassNames[Mockery::class])]]></code>
      <code><![CDATA[self::assertTrue(
                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())
            )]]></code>
      <code><![CDATA[self::assertTrue(
                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())
            )]]></code>
      <code><![CDATA[self::assertTrue(
            $this->testResult->wasSuccessful(),
            'sanity check: empty test results should be considered successful'
        )]]></code>
      <code><![CDATA[self::assertTrue(
            $this->testResult->wasSuccessful(),
            'sanity check: empty test results should be considered successful'
        )]]></code>
      <code><![CDATA[self::assertTrue($this->testResult->wasSuccessful(), 'expected test result to indicate success')]]></code>
      <code><![CDATA[self::assertTrue($this->testResult->wasSuccessful(), 'expected test result to indicate success')]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[addToAssertionCount]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[endTest]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mockery_getExpectationCount]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[wasSuccessful]]></code>
      <code><![CDATA[wasSuccessful]]></code>
    </MixedMethodCall>
    <UndefinedPropertyFetch>
      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>
      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>
    </UndefinedPropertyFetch>
    <UnusedClass>
      <code><![CDATA[TestListenerTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/AdhocTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$container]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertFalse(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>
      <code><![CDATA[self::assertFalse(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(NameOfExistingClass::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(NameOfExistingClass::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(NameOfExistingClass::class, $m)]]></code>
      <code><![CDATA[self::assertTrue(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>
      <code><![CDATA[self::assertTrue(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mockery_close]]></code>
      <code><![CDATA[mockery_close]]></code>
      <code><![CDATA[mockery_close]]></code>
    </MixedMethodCall>
    <RedundantCondition>
      <code><![CDATA[assertFalse]]></code>
    </RedundantCondition>
    <UnusedClass>
      <code><![CDATA[AdhocTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/AllowsExpectsSyntaxTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>
      <code><![CDATA[self::assertSame('baz', $stub->bar())]]></code>
      <code><![CDATA[self::assertSame('baz', $stub->bar())]]></code>
      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>
      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>
      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>
      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>
      <code><![CDATA[self::assertSame(123, $stub->allows())]]></code>
      <code><![CDATA[self::assertSame(123, $stub->allows())]]></code>
      <code><![CDATA[self::assertSame(123, $stub->expects())]]></code>
      <code><![CDATA[self::assertSame(123, $stub->expects())]]></code>
      <code><![CDATA[self::assertSame(456, $stub->foo(123))]]></code>
      <code><![CDATA[self::assertSame(456, $stub->foo(123))]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturns]]></code>
      <code><![CDATA[andReturns]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[withAnyArgs]]></code>
    </MixedMethodCall>
    <PossiblyUndefinedMethod>
      <code><![CDATA[andReturns]]></code>
    </PossiblyUndefinedMethod>
    <TooManyArguments>
      <code><![CDATA[andReturns]]></code>
    </TooManyArguments>
    <UndefinedInterfaceMethod>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturns]]></code>
      <code><![CDATA[andReturns]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
    </UndefinedMagicMethod>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[AllowsExpectsSyntaxTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/CallableSpyTest.php">
    <InvalidFunctionCall>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy()]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(123)]]></code>
      <code><![CDATA[$spy(456)]]></code>
    </InvalidFunctionCall>
    <MissingClosureParamType>
      <code><![CDATA[$number]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[function ($number) {]]></code>
    </MissingClosureReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame(124, $spy(123))]]></code>
      <code><![CDATA[self::assertSame(124, $spy(123))]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$number]]></code>
    </MixedOperand>
    <UndefinedInterfaceMethod>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code><![CDATA[CallableSpyTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/DefaultMatchersTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$mock]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[setDefaultMatcher]]></code>
      <code><![CDATA[setDefaultMatcher]]></code>
      <code><![CDATA[setDefaultMatcher]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <UnusedClass>
      <code><![CDATA[DefaultMatchersTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/DemeterChainTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['overload:mock1']]></code>
      <code><![CDATA['overload:mock2']]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[assertSame]]></code>
    </DocblockTypeContradiction>
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, $result)]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, $result)]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, $result)]]></code>
      <code><![CDATA[self::assertSame($bar, $a->foo()->bar())]]></code>
      <code><![CDATA[self::assertSame($bar, $a->foo()->bar())]]></code>
      <code><![CDATA[self::assertSame($qux, $a->foo()->qux())]]></code>
      <code><![CDATA[self::assertSame($qux, $a->foo()->qux())]]></code>
      <code><![CDATA[self::assertSame('first', $this->mock->levelOne() ->levelTwo() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('first', $this->mock->levelOne() ->levelTwo() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('second', $this->mock->levelOne() ->levelTwo() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('second', $this->mock->levelOne() ->levelTwo() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst('parameter'))]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst('parameter'))]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement()->getFirst())]]></code>
      <code><![CDATA[self::assertSame('something', $this->mock->getElement()->getFirst())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond('secondParameter'))]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond('secondParameter'))]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement()->getFirst())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement()->getFirst())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getOtherElement() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getOtherElement() ->getSecond())]]></code>
      <code><![CDATA[self::assertSame('somethingNew', $this->mock->getElement() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame('somethingNew', $this->mock->getElement() ->getFirst())]]></code>
      <code><![CDATA[self::assertSame(1, mock1::select()->some()->data())]]></code>
      <code><![CDATA[self::assertSame(1, mock1::select()->some()->data())]]></code>
      <code><![CDATA[self::assertSame(2, mock1::select()->some()->other()->data())]]></code>
      <code><![CDATA[self::assertSame(2, mock1::select()->some()->other()->data())]]></code>
      <code><![CDATA[self::assertSame(3, mock2::select()->some()->data())]]></code>
      <code><![CDATA[self::assertSame(3, mock2::select()->some()->data())]]></code>
      <code><![CDATA[self::assertSame(4, mock2::select()->some()->other()->data())]]></code>
      <code><![CDATA[self::assertSame(4, mock2::select()->some()->other()->data())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getFirst]]></code>
      <code><![CDATA[getSecond]]></code>
      <code><![CDATA[getSecond]]></code>
      <code><![CDATA[getSecond]]></code>
      <code><![CDATA[getSecond]]></code>
      <code><![CDATA[getSecond]]></code>
      <code><![CDATA[getSecond]]></code>
      <code><![CDATA[levelTwo]]></code>
      <code><![CDATA[levelTwo]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$mock]]></code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code><![CDATA[Mockery::mock()->shouldIgnoreMissing()]]></code>
    </PropertyTypeCoercion>
    <UndefinedClass>
      <code><![CDATA[$mock1]]></code>
      <code><![CDATA[$mock1]]></code>
      <code><![CDATA[$mock2]]></code>
      <code><![CDATA[$mock2]]></code>
      <code><![CDATA[mock1]]></code>
      <code><![CDATA[mock1]]></code>
      <code><![CDATA[mock2]]></code>
      <code><![CDATA[mock2]]></code>
    </UndefinedClass>
    <UndefinedInterfaceMethod>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElement]]></code>
      <code><![CDATA[getElements]]></code>
      <code><![CDATA[getElements]]></code>
      <code><![CDATA[getOtherElement]]></code>
      <code><![CDATA[levelOne]]></code>
      <code><![CDATA[levelOne]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
    </UndefinedMagicMethod>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[DemeterChainTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/ExpectationTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['InvalidArgumentException']]></code>
      <code><![CDATA['OutOfBoundsException']]></code>
      <code><![CDATA['f']]></code>
      <code><![CDATA[[
            'foo' => 'rfoo',
            'bar' => 'rbar',
            'baz' => 'rbaz',
        ]]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
    </DocblockTypeContradiction>
    <MissingClosureParamType>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$argument]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$sum]]></code>
      <code><![CDATA[$sum]]></code>
      <code><![CDATA[$sum]]></code>
      <code><![CDATA[$v]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[function ($arg) {]]></code>
      <code><![CDATA[function ($arg) {]]></code>
      <code><![CDATA[function ($arg) {]]></code>
      <code><![CDATA[function ($odd, $even) {]]></code>
      <code><![CDATA[function ($odd, $even) {]]></code>
      <code><![CDATA[function ($odd, $even, $sum = null) {]]></code>
      <code><![CDATA[function ($odd, $even, $sum = null) {]]></code>
      <code><![CDATA[function ($odd, $even, $sum = null) {]]></code>
      <code><![CDATA[function ($v) {]]></code>
    </MissingClosureReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$mock]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[Mockery::self()]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[self::assertEmpty($this->mock->bar)]]></code>
      <code><![CDATA[self::assertEmpty($this->mock->bar)]]></code>
      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertFalse($this->mock->foo())]]></code>
      <code><![CDATA[self::assertFalse($this->mock->foo())]]></code>
      <code><![CDATA[self::assertFalse($waterMock->mockery_isAnonymous())]]></code>
      <code><![CDATA[self::assertFalse($waterMock->mockery_isAnonymous())]]></code>
      <code><![CDATA[self::assertInstanceOf('InvalidArgumentException', $e, "Wrong or no exception thrown: {$e->getMessage()}")]]></code>
      <code><![CDATA[self::assertInstanceOf('InvalidArgumentException', $e, "Wrong or no exception thrown: {$e->getMessage()}")]]></code>
      <code><![CDATA[self::assertInstanceOf('InvalidArgumentException', $e, "Wrong or no exception thrown: {$e->getMessage()}")]]></code>
      <code><![CDATA[self::assertInstanceOf('OutOfBoundsException', $e, "Wrong or no exception thrown: {$e->getMessage()}")]]></code>
      <code><![CDATA[self::assertInstanceOf('OutOfBoundsException', $e, "Wrong or no exception thrown: {$e->getMessage()}")]]></code>
      <code><![CDATA[self::assertInstanceOf('OutOfBoundsException', $e, "Wrong or no exception thrown: {$e->getMessage()}")]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing()->asUndefined())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing()->asUndefined())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing()->asUndefined())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, \mock('f')->byDefault())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, \mock('f')->byDefault())]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, \mock('f')->byDefault())]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2))]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2))]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2))]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2)->a()->b()->c())]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2)->a()->b()->c())]]></code>
      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2)->a()->b()->c())]]></code>
      <code><![CDATA[self::assertIsString("{$this->mock->g()}")]]></code>
      <code><![CDATA[self::assertIsString("{$this->mock->g()}")]]></code>
      <code><![CDATA[self::assertIsString("{$this->mock}")]]></code>
      <code><![CDATA[self::assertIsString("{$this->mock}")]]></code>
      <code><![CDATA[self::assertLessThan($e->getOrderNumber(), $m->getOrderNumber())]]></code>
      <code><![CDATA[self::assertLessThan($e->getOrderNumber(), $m->getOrderNumber())]]></code>
      <code><![CDATA[self::assertLessThan($m->getOrderNumber(), $s->getOrderNumber())]]></code>
      <code><![CDATA[self::assertLessThan($m->getOrderNumber(), $s->getOrderNumber())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo('foo', [], new stdClass()))]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo('foo', [], new stdClass()))]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo(...$args))]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo(...$args))]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertNull($this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertNull($this->mock->g(1, 2))]]></code>
      <code><![CDATA[self::assertNull($this->mock->g(1, 2))]]></code>
      <code><![CDATA[self::assertSame(
            "[foo(['Spam' => 'Ham', 'Bar' => 'Baz', 0 => 'Bar', 1 => 'Baz', 2 => 'Bar', 3 => 'Baz', 4 => 'Bar', 5 => 'Baz', 6 => 'Bar', 7 => 'Baz', 8 => 'Bar', 9 => 'Baz', 10 => 'Bar', 11 => 'Baz', 12 => 'Bar', 13 => 'Baz', 14 => 'Bar', 15 => 'Baz', 16 => 'Bar', 17 => 'Baz', 18 => 'Bar', 19 => 'Baz', 20 => 'Bar', 21 => 'Baz', 22 => 'Bar', 23 => 'Baz', 24 => 'Bar', 25 => 'Baz', 26 => 'Bar', 27 => 'Baz', 28 => 'Bar', 29 => 'Baz', 30 => 'Bar', 31 => 'Baz', 32 => 'Bar', 33 => 'Baz', 34 => 'Bar', 35 => 'Baz', 36 => 'Bar', 37 => 'Baz', 38 => 'Bar', 39 => 'Baz', 40 => 'Bar', 41 => 'Baz', 42 => 'Bar', 43 => 'Baz', 44 => 'Bar', 45 => 'Baz', 46 => 'Baz', 47 => 'Bar', 48 => 'Baz', 49 => 'Bar', 50 => 'Baz', 51 => 'Bar', 52 => 'Baz', 53 => 'Bar', 54 => 'Baz', 55 => 'Bar', 56 => 'Baz', 57 => 'Baz', 58 => 'Bar', 59 => 'Baz', 60 => 'Bar', 61 => 'Baz', 62 => 'Bar', 63 => 'Baz', 64 => 'Bar', 65 => 'Baz', 66 => 'Bar', 67 => 'Baz', 68 => 'Baz', 69 => 'Bar', 70 => 'Baz', 71 => 'Bar', 72 => 'Baz', 73 => 'Bar', 74 => 'Baz', 7...])]",
            (string) $exp
        )]]></code>
      <code><![CDATA[self::assertSame(
            "[foo(['Spam' => 'Ham', 'Bar' => 'Baz', 0 => 'Bar', 1 => 'Baz', 2 => 'Bar', 3 => 'Baz', 4 => 'Bar', 5 => 'Baz', 6 => 'Bar', 7 => 'Baz', 8 => 'Bar', 9 => 'Baz', 10 => 'Bar', 11 => 'Baz', 12 => 'Bar', 13 => 'Baz', 14 => 'Bar', 15 => 'Baz', 16 => 'Bar', 17 => 'Baz', 18 => 'Bar', 19 => 'Baz', 20 => 'Bar', 21 => 'Baz', 22 => 'Bar', 23 => 'Baz', 24 => 'Bar', 25 => 'Baz', 26 => 'Bar', 27 => 'Baz', 28 => 'Bar', 29 => 'Baz', 30 => 'Bar', 31 => 'Baz', 32 => 'Bar', 33 => 'Baz', 34 => 'Bar', 35 => 'Baz', 36 => 'Bar', 37 => 'Baz', 38 => 'Bar', 39 => 'Baz', 40 => 'Bar', 41 => 'Baz', 42 => 'Bar', 43 => 'Baz', 44 => 'Bar', 45 => 'Baz', 46 => 'Baz', 47 => 'Bar', 48 => 'Baz', 49 => 'Bar', 50 => 'Baz', 51 => 'Bar', 52 => 'Baz', 53 => 'Bar', 54 => 'Baz', 55 => 'Bar', 56 => 'Baz', 57 => 'Baz', 58 => 'Bar', 59 => 'Baz', 60 => 'Bar', 61 => 'Baz', 62 => 'Bar', 63 => 'Baz', 64 => 'Bar', 65 => 'Baz', 66 => 'Bar', 67 => 'Baz', 68 => 'Baz', 69 => 'Bar', 70 => 'Baz', 71 => 'Bar', 72 => 'Baz', 73 => 'Bar', 74 => 'Baz', 7...])]",
            (string) $exp
        )]]></code>
      <code><![CDATA[self::assertSame("[foo(1, 'bar', object(stdClass), ['Spam' => 'Ham', 'Bar' => 'Baz'])]", (string) $exp)]]></code>
      <code><![CDATA[self::assertSame("[foo(1, 'bar', object(stdClass), ['Spam' => 'Ham', 'Bar' => 'Baz'])]", (string) $exp)]]></code>
      <code><![CDATA[self::assertSame("{$this->mock}", 'dave')]]></code>
      <code><![CDATA[self::assertSame("{$this->mock}", 'dave')]]></code>
      <code><![CDATA[self::assertSame($args[$index], $this->mock->foo(...$args))]]></code>
      <code><![CDATA[self::assertSame($args[$index], $this->mock->foo(...$args))]]></code>
      <code><![CDATA[self::assertSame($object, $temp)]]></code>
      <code><![CDATA[self::assertSame($object, $temp)]]></code>
      <code><![CDATA[self::assertSame($this->mock, $this->mock->a()->b())]]></code>
      <code><![CDATA[self::assertSame($this->mock, $this->mock->a()->b())]]></code>
      <code><![CDATA[self::assertSame($this->mock, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame($this->mock, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>
      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>
      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>
      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>
      <code><![CDATA[self::assertSame('456', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('456', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('Spam!', $demeter->doit())]]></code>
      <code><![CDATA[self::assertSame('Spam!', $demeter->doit())]]></code>
      <code><![CDATA[self::assertSame('Spam!', $demeter->doitWithArgs())]]></code>
      <code><![CDATA[self::assertSame('Spam!', $demeter->doitWithArgs())]]></code>
      <code><![CDATA[self::assertSame('[foo(1), bar(1)]', (string) $exp)]]></code>
      <code><![CDATA[self::assertSame('[foo(1), bar(1)]', (string) $exp)]]></code>
      <code><![CDATA[self::assertSame('a', $this->mock->foo('a'))]]></code>
      <code><![CDATA[self::assertSame('a', $this->mock->foo('a'))]]></code>
      <code><![CDATA[self::assertSame('b', $this->mock->foo('b'))]]></code>
      <code><![CDATA[self::assertSame('b', $this->mock->foo('b'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('baz'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('baz'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertSame('bar', $this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertSame('baz', $mockInstanceOne->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $mockInstanceOne->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('baz', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('bazz', $mockInstanceTwo->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $mockInstanceTwo->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>
      <code><![CDATA[self::assertSame('blue', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('blue', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('first', $this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertSame('first', $this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertSame('first', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('first', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('foo', $e->getMessage())]]></code>
      <code><![CDATA[self::assertSame('foo', $e->getMessage())]]></code>
      <code><![CDATA[self::assertSame('foobar', $foo->foo($input))]]></code>
      <code><![CDATA[self::assertSame('foobar', $foo->foo($input))]]></code>
      <code><![CDATA[self::assertSame('foobar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('foobar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('green', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('green', $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('newbar', $this->mock->foo('test'))]]></code>
      <code><![CDATA[self::assertSame('newbar', $this->mock->foo('test'))]]></code>
      <code><![CDATA[self::assertSame('rbar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('rbar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('rbaz', $mock->baz())]]></code>
      <code><![CDATA[self::assertSame('rbaz', $mock->baz())]]></code>
      <code><![CDATA[self::assertSame('second', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('second', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->a())]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->a())]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(10, $this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertSame(10, $this->mock->foo(1))]]></code>
      <code><![CDATA[self::assertSame(2, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(2, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(2, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(2, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(20, $this->mock->bar(2))]]></code>
      <code><![CDATA[self::assertSame(20, $this->mock->bar(2))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(3, $this->mock->foo())]]></code>
      <code><![CDATA[self::assertSame(4, $temp)]]></code>
      <code><![CDATA[self::assertSame(4, $temp)]]></code>
      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>
      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>
      <code><![CDATA[self::assertSame(6, $this->mock->foo(5))]]></code>
      <code><![CDATA[self::assertSame(6, $this->mock->foo(5))]]></code>
      <code><![CDATA[self::assertSame([1, 2, 3], \iterator_to_array($this->mock->foo()))]]></code>
      <code><![CDATA[self::assertSame([1, 2, 3], \iterator_to_array($this->mock->foo()))]]></code>
      <code><![CDATA[self::assertTrue($mock->doFirst())]]></code>
      <code><![CDATA[self::assertTrue($mock->doFirst())]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>
      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>
      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>
      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>
      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>
      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>
      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>
      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>
      <code><![CDATA[self::assertTrue($this->mock->foo())]]></code>
      <code><![CDATA[self::assertTrue($this->mock->foo())]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$this->mock->foo()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$e]]></code>
      <code><![CDATA[$exp]]></code>
      <code><![CDATA[$exp]]></code>
      <code><![CDATA[$exp]]></code>
      <code><![CDATA[$exp]]></code>
      <code><![CDATA[$m]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$s]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[a]]></code>
      <code><![CDATA[a]]></code>
      <code><![CDATA[a]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturnArg]]></code>
      <code><![CDATA[andReturnArg]]></code>
      <code><![CDATA[andReturnArg]]></code>
      <code><![CDATA[andReturnArg]]></code>
      <code><![CDATA[andReturnFalse]]></code>
      <code><![CDATA[andReturnNull]]></code>
      <code><![CDATA[andReturnNull]]></code>
      <code><![CDATA[andReturnSelf]]></code>
      <code><![CDATA[andReturnTrue]]></code>
      <code><![CDATA[andReturnTrue]]></code>
      <code><![CDATA[andReturnTrue]]></code>
      <code><![CDATA[andReturnUndefined]]></code>
      <code><![CDATA[andReturnUsing]]></code>
      <code><![CDATA[andReturnValues]]></code>
      <code><![CDATA[andReturns]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andSet]]></code>
      <code><![CDATA[andThrow]]></code>
      <code><![CDATA[andThrow]]></code>
      <code><![CDATA[andThrow]]></code>
      <code><![CDATA[andThrow]]></code>
      <code><![CDATA[andThrow]]></code>
      <code><![CDATA[andThrow]]></code>
      <code><![CDATA[andThrowExceptions]]></code>
      <code><![CDATA[andThrowExceptions]]></code>
      <code><![CDATA[andThrows]]></code>
      <code><![CDATA[andYield]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atLeast]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atMost]]></code>
      <code><![CDATA[atleast]]></code>
      <code><![CDATA[atleast]]></code>
      <code><![CDATA[atleast]]></code>
      <code><![CDATA[atleast]]></code>
      <code><![CDATA[b]]></code>
      <code><![CDATA[b]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[because]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[c]]></code>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[final]]></code>
      <code><![CDATA[final]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[g]]></code>
      <code><![CDATA[g]]></code>
      <code><![CDATA[g]]></code>
      <code><![CDATA[g]]></code>
      <code><![CDATA[getOrderNumber]]></code>
      <code><![CDATA[getOrderNumber]]></code>
      <code><![CDATA[getOrderNumber]]></code>
      <code><![CDATA[getOrderNumber]]></code>
      <code><![CDATA[globally]]></code>
      <code><![CDATA[globally]]></code>
      <code><![CDATA[hasBookmarksTagged]]></code>
      <code><![CDATA[hasBookmarksTagged]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[never]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[ordered]]></code>
      <code><![CDATA[passthru]]></code>
      <code><![CDATA[passthru]]></code>
      <code><![CDATA[set]]></code>
      <code><![CDATA[set]]></code>
      <code><![CDATA[set]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[start]]></code>
      <code><![CDATA[start]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[withAnyArgs]]></code>
      <code><![CDATA[withAnyArgs]]></code>
      <code><![CDATA[withAnyArgs]]></code>
      <code><![CDATA[withAnyArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
      <code><![CDATA[withNoArgs]]></code>
      <code><![CDATA[withSomeOfArgs]]></code>
      <code><![CDATA[withSomeOfArgs]]></code>
      <code><![CDATA[withSomeOfArgs]]></code>
      <code><![CDATA[zeroOrMoreTimes]]></code>
      <code><![CDATA[zeroOrMoreTimes]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$arg]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$even]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$odd]]></code>
      <code><![CDATA[$v]]></code>
    </MixedOperand>
    <MixedPropertyAssignment>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
      <code><![CDATA[$this->mock]]></code>
    </MixedPropertyAssignment>
    <MixedPropertyFetch>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
    </MixedPropertyFetch>
    <NoValue>
      <code><![CDATA[$this->mock->bar]]></code>
      <code><![CDATA[$this->mock->bar]]></code>
    </NoValue>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
    </RedundantConditionGivenDocblockType>
    <TooManyArguments>
      <code><![CDATA[expectException]]></code>
      <code><![CDATA[expectException]]></code>
    </TooManyArguments>
    <UndefinedClass>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock2]]></code>
      <code><![CDATA[$mock2]]></code>
      <code><![CDATA[$mock2]]></code>
      <code><![CDATA[$mock2]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[$service]]></code>
      <code><![CDATA[[
            'foo' => 'rfoo',
            'bar' => 'rbar',
            'baz' => 'rbaz',
        ]]]></code>
      <code><![CDATA[\mock('f')]]></code>
      <code><![CDATA[\mock('f')]]></code>
    </UndefinedClass>
    <UndefinedInterfaceMethod>
      <code><![CDATA[addBookmark]]></code>
      <code><![CDATA[addBookmark]]></code>
      <code><![CDATA[addBookmark]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[baz]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[hasBookmarksTagged]]></code>
      <code><![CDATA[hasBookmarksTagged]]></code>
      <code><![CDATA[hasBookmarksTagged]]></code>
      <code><![CDATA[login]]></code>
      <code><![CDATA[mockery_isAnonymous]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[with]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[theAnswer]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[times]]></code>
      <code><![CDATA[with]]></code>
    </UndefinedMagicMethod>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[nonExistent]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UndefinedPropertyFetch>
      <code><![CDATA[$mockInstanceOne->bar]]></code>
      <code><![CDATA[$mockInstanceTwo->bar]]></code>
    </UndefinedPropertyFetch>
    <UnusedClass>
      <code><![CDATA[ExpectationTest]]></code>
    </UnusedClass>
    <UnusedClosureParam>
      <code><![CDATA[$argument]]></code>
    </UnusedClosureParam>
  </file>
  <file src="tests/Unit/Mockery/Generator/DefinedTargetClassTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertFalse($target->hasInternalAncestor())]]></code>
      <code><![CDATA[self::assertFalse($target->hasInternalAncestor())]]></code>
      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>
      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>
      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>
      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[DefinedTargetClassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/MockConfigurationBuilderTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertContains('__halt_compiler', $builder->getMockConfiguration()->getBlackListedMethods())]]></code>
      <code><![CDATA[self::assertContains('__halt_compiler', $builder->getMockConfiguration()->getBlackListedMethods())]]></code>
      <code><![CDATA[self::assertContains('__halt_compiler', $builder->getMockConfiguration()->getBlackListedMethods())]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::markTestSkipped('Need a builtin class with a method that is a reserved word')]]></code>
      <code><![CDATA[self::markTestSkipped('Need a builtin class with a method that is a reserved word')]]></code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$methods[0]]]></code>
      <code><![CDATA[$methods[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <UnusedClass>
      <code><![CDATA[MockConfigurationBuilderTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/CallTypeHintPassTest.php">
    <InvalidArgument>
      <code><![CDATA[[
            'requiresCallStaticTypeHintRemoval' => true,
        ]]]></code>
      <code><![CDATA[[
            'requiresCallTypeHintRemoval' => true,
        ]]]></code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, '__call($method, $args)'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, '__call($method, $args)'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, '__callStatic($method, $args)'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, '__callStatic($method, $args)'))]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$config]]></code>
      <code><![CDATA[$config]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$config]]></code>
      <code><![CDATA[$config]]></code>
    </MixedAssignment>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[CallTypeHintPassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/ClassAttributesPassTest.php">
    <MissingClassConstType>
      <code><![CDATA[CODE = 'namespace Mockery; class Mock {}']]></code>
    </MissingClassConstType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertStringContainsString($expected, $code)]]></code>
      <code><![CDATA[self::assertStringContainsString($expected, $code)]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[expects]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[ClassAttributesPassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/ClassNamePassTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$pass]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertFalse(\mb_strpos($code, 'namespace Mockery;'))]]></code>
      <code><![CDATA[self::assertFalse(\mb_strpos($code, 'namespace Mockery;'))]]></code>
      <code><![CDATA[self::assertFalse(\mb_strpos($code, 'namespace Mockery;'))]]></code>
      <code><![CDATA[self::assertFalse(\mb_strpos($code, 'namespace Mockery;'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'class Dave'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'class Dave'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'namespace Dave;'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'namespace Dave;'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'namespace Dave;'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'namespace Dave;'))]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
      <code><![CDATA[$code]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[apply]]></code>
      <code><![CDATA[apply]]></code>
      <code><![CDATA[apply]]></code>
      <code><![CDATA[apply]]></code>
    </MixedMethodCall>
    <UnusedClass>
      <code><![CDATA[ClassNamePassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/ClassPassTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[['Testing\TestClass']]]></code>
    </ArgumentTypeCoercion>
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$pass]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'class Mock extends \Testing\TestClass implements MockInterface'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'class Mock extends \Testing\TestClass implements MockInterface'))]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$code]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$code]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[apply]]></code>
    </MixedMethodCall>
    <UndefinedClass>
      <code><![CDATA[['Testing\TestClass']]]></code>
    </UndefinedClass>
    <UnusedClass>
      <code><![CDATA[ClassPassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/ConstantsPassTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, "const FOO = 'test'"))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, "const FOO = 'test'"))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[ConstantsPassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/InstanceMockPassTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'protected $_mockery_ignoreVerification'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'protected $_mockery_ignoreVerification'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'public function __construct'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'public function __construct'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'this->_mockery_constructorCalled(func_get_args());'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'this->_mockery_constructorCalled(func_get_args());'))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[InstanceMockPassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Generator/StringManipulation/Pass/InterfacePassTest.php">
    <InvalidArgument>
      <code><![CDATA[[
                    'getName' => '\Dave\Dave',
                ]]]></code>
      <code><![CDATA[[
                    'getName' => '\Paddy\Paddy',
                ]]]></code>
      <code><![CDATA[[
            'getTargetInterfaces' => [
                Mockery::mock([
                    'getName' => '\Dave\Dave',
                ]),
                Mockery::mock([
                    'getName' => '\Paddy\Paddy',
                ]),
            ],
        ]]]></code>
      <code><![CDATA[[
            'getTargetInterfaces' => [],
        ]]]></code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'implements MockInterface, \Dave\Dave, \Paddy\Paddy'))]]></code>
      <code><![CDATA[self::assertNotFalse(\mb_strpos($code, 'implements MockInterface, \Dave\Dave, \Paddy\Paddy'))]]></code>
      <code><![CDATA[self::assertSame(self::CODE, $code)]]></code>
      <code><![CDATA[self::assertSame(self::CODE, $code)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[InterfacePassTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/GlobalHelpersTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$className]]></code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf($className, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf($className, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf($className, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedMethod>
      <code><![CDATA[foo]]></code>
    </PossiblyUndefinedMethod>
    <UndefinedInterfaceMethod>
      <code><![CDATA[foo]]></code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code><![CDATA[GlobalHelpersTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/HamcrestExpectationTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$mock]]></code>
    </MissingPropertyType>
    <MixedMethodCall>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <UnusedClass>
      <code><![CDATA[HamcrestExpectationTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Loader/EvalLoaderTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function getLoader(): Loader]]></code>
    </MissingOverrideAttribute>
    <UnusedClass>
      <code><![CDATA[EvalLoaderTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Loader/LoaderTestCase.php">
    <MissingThrowsDocblock>
      <code><![CDATA[new MockDefinition($config, $code)]]></code>
      <code><![CDATA[self::assertTrue(\class_exists($className))]]></code>
      <code><![CDATA[self::assertTrue(\class_exists($className))]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[testLoad]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="tests/Unit/Mockery/Loader/RequireLoaderTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function getLoader(): Loader]]></code>
    </MissingOverrideAttribute>
    <UnusedClass>
      <code><![CDATA[RequireLoaderTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Matcher/HasKeyTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[HasKeyTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Matcher/HasValueTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[HasValueTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Matcher/IsEqualTest.php">
    <MissingParamType>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$expected]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertTrue(Mockery::isEqual($expected)->match($actual))]]></code>
      <code><![CDATA[self::assertTrue(Mockery::isEqual($expected)->match($actual))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[IsEqualTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Matcher/IsSameTest.php">
    <MissingParamType>
      <code><![CDATA[$actual]]></code>
      <code><![CDATA[$expected]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertTrue(Mockery::isSame($expected)->match($actual))]]></code>
      <code><![CDATA[self::assertTrue(Mockery::isSame($expected)->match($actual))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[IsSameTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/Matcher/SubsetTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[SubsetTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockClassWithFinalToStringTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[protected function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$container]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalToString::class, $mock)]]></code>
      <code><![CDATA[self::assertNotSame('bar', $mock->__toString())]]></code>
      <code><![CDATA[self::assertNotSame('bar', $mock->__toString())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code><![CDATA[$mock]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mockery_close]]></code>
    </MixedMethodCall>
    <UnusedClass>
      <code><![CDATA[MockClassWithFinalToStringTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockClassWithIterableReturnTypeTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame([], $mock->returnIterable())]]></code>
      <code><![CDATA[self::assertSame([], $mock->returnIterable())]]></code>
    </MissingThrowsDocblock>
    <UndefinedMethod>
      <code><![CDATA[expects]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockClassWithIterableReturnTypeTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockClassWithMethodOverloadingTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloadingWithoutCall::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloadingWithoutCall::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloadingWithoutCall::class, $mock)]]></code>
      <code><![CDATA[self::assertSame(1, $mock->thisIsRealMethod())]]></code>
      <code><![CDATA[self::assertSame(1, $mock->thisIsRealMethod())]]></code>
      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>
      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>
    </MissingThrowsDocblock>
    <UndefinedMagicMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[theAnswer]]></code>
    </UndefinedMagicMethod>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[randomMethod]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockClassWithMethodOverloadingTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockClassWithUnknownTypeHintTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $mock)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MockClassWithUnknownTypeHintTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockConfigurationTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertCount(1, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(1, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(1, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(1, $methods)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>
      <code><![CDATA[self::assertCount(2, $methods)]]></code>
      <code><![CDATA[self::assertCount(2, $methods)]]></code>
      <code><![CDATA[self::assertCount(2, $methods)]]></code>
      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(Iterator::class, $interfaces[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(Iterator::class, $interfaces[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(IteratorAggregate::class, $first->getName())]]></code>
      <code><![CDATA[self::assertSame(IteratorAggregate::class, $first->getName())]]></code>
      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>
      <code><![CDATA[self::assertSame(TestTraversableInterface2::class, $interfaces[1]->getName())]]></code>
      <code><![CDATA[self::assertSame(TestTraversableInterface2::class, $interfaces[1]->getName())]]></code>
      <code><![CDATA[self::assertSame(TestTraversableInterface3::class, $interfaces[1]->getName())]]></code>
      <code><![CDATA[self::assertSame(TestTraversableInterface3::class, $interfaces[1]->getName())]]></code>
      <code><![CDATA[self::assertSame(TestTraversableInterface::class, $interfaces[1]->getName())]]></code>
      <code><![CDATA[self::assertSame(TestTraversableInterface::class, $interfaces[1]->getName())]]></code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$interfaces[0]]]></code>
      <code><![CDATA[$interfaces[0]]]></code>
      <code><![CDATA[$interfaces[0]]]></code>
      <code><![CDATA[$interfaces[1]]]></code>
      <code><![CDATA[$interfaces[1]]]></code>
      <code><![CDATA[$interfaces[1]]]></code>
      <code><![CDATA[$methods[0]]]></code>
      <code><![CDATA[$methods[0]]]></code>
      <code><![CDATA[$methods[0]]]></code>
      <code><![CDATA[$methods[0]]]></code>
      <code><![CDATA[$methods[0]]]></code>
      <code><![CDATA[$methods[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <UnusedClass>
      <code><![CDATA[MockConfigurationTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['someClass']]></code>
      <code><![CDATA['someClass']]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
      <code><![CDATA[assertSame]]></code>
    </DocblockTypeContradiction>
    <InaccessibleMethod>
      <code><![CDATA[foo]]></code>
    </InaccessibleMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(ErrorException::class, $errorException)]]></code>
      <code><![CDATA[self::assertInstanceOf(ErrorException::class, $errorException)]]></code>
      <code><![CDATA[self::assertInstanceOf(ErrorException::class, $errorException)]]></code>
      <code><![CDATA[self::assertInstanceOf(Exception::class, $errorException)]]></code>
      <code><![CDATA[self::assertInstanceOf(Exception::class, $errorException)]]></code>
      <code><![CDATA[self::assertInstanceOf(Exception::class, $errorException)]]></code>
      <code><![CDATA[self::assertInstanceOf(Exception::class, $exception)]]></code>
      <code><![CDATA[self::assertInstanceOf(Exception::class, $exception)]]></code>
      <code><![CDATA[self::assertInstanceOf(Exception::class, $exception)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingMethod('testFunction'))]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingMethod('testFunction'))]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingMethod('testFunction'))]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingProtectedMethods('testFunction'))]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingProtectedMethods('testFunction'))]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingProtectedMethods('testFunction'))]]></code>
      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>
      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>
      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>
      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>
      <code><![CDATA[self::assertNull($mock->bar())]]></code>
      <code><![CDATA[self::assertNull($mock->bar())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->nonExistentMethod())]]></code>
      <code><![CDATA[self::assertNull($mock->nonExistentMethod())]]></code>
      <code><![CDATA[self::assertNull($mock->nonExistingMethod())]]></code>
      <code><![CDATA[self::assertNull($mock->nonExistingMethod())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('foo', (string) $mock)]]></code>
      <code><![CDATA[self::assertSame('foo', (string) $mock)]]></code>
      <code><![CDATA[self::assertSame('new_foo', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('new_foo', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('result', $mock->nonExistentMethod())]]></code>
      <code><![CDATA[self::assertSame('result', $mock->nonExistentMethod())]]></code>
      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertTrue($m->foo())]]></code>
      <code><![CDATA[self::assertTrue($m->foo())]]></code>
      <code><![CDATA[self::assertTrue($m->test123())]]></code>
      <code><![CDATA[self::assertTrue($m->test123())]]></code>
      <code><![CDATA[self::assertTrue($m->testSomeNonExistentMethod())]]></code>
      <code><![CDATA[self::assertTrue($m->testSomeNonExistentMethod())]]></code>
      <code><![CDATA[self::assertTrue(\method_exists($mock, '__toString'))]]></code>
      <code><![CDATA[self::assertTrue(\method_exists($mock, '__toString'))]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[asUndefined]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[byDefault]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[nonExistentMethod]]></code>
      <code><![CDATA[nonExistentMethod]]></code>
      <code><![CDATA[nonExistentMethod]]></code>
      <code><![CDATA[nonExistingMethod]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[passthru]]></code>
      <code><![CDATA[passthru]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </MixedMethodCall>
    <TooManyArguments>
      <code><![CDATA[expectException]]></code>
    </TooManyArguments>
    <UndefinedClass>
      <code><![CDATA[$m]]></code>
      <code><![CDATA[$m]]></code>
    </UndefinedClass>
    <UndefinedInterfaceMethod>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[test123]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
    </UndefinedMagicMethod>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[shouldAllowMockingMethod]]></code>
      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldIgnoreMissing]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[testSomeNonExistentMethod]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockeryCanMockClassesWithSemiReservedWordsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame('foo', $mock->include())]]></code>
      <code><![CDATA[self::assertSame('foo', $mock->include())]]></code>
      <code><![CDATA[self::assertTrue(\method_exists($mock, 'include'))]]></code>
      <code><![CDATA[self::assertTrue(\method_exists($mock, 'include'))]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
    </MixedMethodCall>
    <RedundantCondition>
      <code><![CDATA[assertTrue]]></code>
    </RedundantCondition>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockeryCanMockClassesWithSemiReservedWordsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockeryCanMockMultipleInterfacesWhichOverlapTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[self::assertInstanceOf(Evenement_EventEmitter::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Evenement_EventEmitter::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Evenement_EventEmitter::class, $mock)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MockeryCanMockMultipleInterfacesWhichOverlapTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingAllLowerCasedMethodsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame($expected, $mock->userExpectsCamelCaseMethod())]]></code>
      <code><![CDATA[self::assertSame($expected, $mock->userExpectsCamelCaseMethod())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingAllLowerCasedMethodsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingClassConstantsTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['overload:' . ClassWithConstants::class]]></code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame('baz', $mock::FOO)]]></code>
      <code><![CDATA[self::assertSame('baz', $mock::FOO)]]></code>
      <code><![CDATA[self::assertSame(2, $mock::X)]]></code>
      <code><![CDATA[self::assertSame(2, $mock::X)]]></code>
      <code><![CDATA[self::assertSame([
            'qux' => 'daz',
        ], $mock::BAZ)]]></code>
      <code><![CDATA[self::assertSame([
            'qux' => 'daz',
        ], $mock::BAZ)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MockingClassConstantsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingMethodsWithIterableTypeHintsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(MethodWithIterableTypeHints::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithIterableTypeHints::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithIterableTypeHints::class, $mock)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MockingMethodsWithIterableTypeHintsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingMethodsWithMixedReturnTypeTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame('bar', $mock->foo()->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->foo()->bar())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[bar]]></code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code><![CDATA[MockingMethodsWithMixedReturnTypeTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingMethodsWithNullableParametersTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(MethodWithNullableTypedParameter::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithNullableTypedParameter::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithNullableTypedParameter::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithParametersWithDefaultValues::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithParametersWithDefaultValues::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithParametersWithDefaultValues::class, $mock)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MockingMethodsWithNullableParametersTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingNullableMethodsTest.php">
    <InternalMethod>
      <code><![CDATA[new MethodWithNullableReturnType()]]></code>
      <code><![CDATA[new MethodWithNullableReturnType()]]></code>
      <code><![CDATA[new MethodWithNullableReturnType()]]></code>
      <code><![CDATA[new MethodWithNullableReturnType()]]></code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>
      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>
      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>
      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>
      <code><![CDATA[self::assertNull($double->nullableInt())]]></code>
      <code><![CDATA[self::assertNull($double->nullableInt())]]></code>
      <code><![CDATA[self::assertNull($double->nullableString())]]></code>
      <code><![CDATA[self::assertNull($double->nullableString())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturnNull]]></code>
      <code><![CDATA[andReturnNull]]></code>
      <code><![CDATA[andReturnNull]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
    </MixedMethodCall>
    <PropertyNotSetInConstructor>
      <code><![CDATA[$container]]></code>
    </PropertyNotSetInConstructor>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingNullableMethodsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingProtectedMethodsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertSame('abstractProtected', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('abstractProtected', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('foobar', $mock->foobar())]]></code>
      <code><![CDATA[self::assertSame('foobar', $mock->foobar())]]></code>
      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>
      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[bar]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>
      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </MixedMethodCall>
    <UndefinedClass>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[\mock(TestWithProtectedMethods::class . '[protectedBar]')]]></code>
    </UndefinedClass>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingProtectedMethodsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingStaticMethodsCalledObjectStyleTest.php">
    <InaccessibleMethod>
      <code><![CDATA[protectedBar]]></code>
    </InaccessibleMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertTrue($mock->foo())]]></code>
      <code><![CDATA[self::assertTrue($mock->foo())]]></code>
      <code><![CDATA[self::assertTrue($mock->foo())]]></code>
      <code><![CDATA[self::assertTrue($mock->foo())]]></code>
      <code><![CDATA[self::assertTrue($mock->protectedBar())]]></code>
      <code><![CDATA[self::assertTrue($mock->protectedBar())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingStaticMethodsCalledObjectStyleTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/MockingVariadicArgumentsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame('notbar', $mock->foo())]]></code>
      <code><![CDATA[self::assertSame('notbar', $mock->foo())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingVariadicArgumentsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/NamedMockTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['\Mockery\Dave123']]></code>
    </ArgumentTypeCoercion>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf('\Mockery\Dave123', $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf('\Mockery\Dave123', $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf('\Mockery\Dave123', $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(DateTime::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(DateTime::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(DateTime::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Habitat::class, $animal->habitat())]]></code>
      <code><![CDATA[self::assertInstanceOf(Habitat::class, $animal->habitat())]]></code>
      <code><![CDATA[self::assertInstanceOf(Habitat::class, $animal->habitat())]]></code>
      <code><![CDATA[self::assertSame('dave', $mock->getDave())]]></code>
      <code><![CDATA[self::assertSame('dave', $mock->getDave())]]></code>
      <code><![CDATA[self::assertTrue($gardener->water($cactus))]]></code>
      <code><![CDATA[self::assertTrue($gardener->water($cactus))]]></code>
    </MissingThrowsDocblock>
    <TypeDoesNotContainType>
      <code><![CDATA[assertInstanceOf]]></code>
    </TypeDoesNotContainType>
    <UndefinedClass>
      <code><![CDATA[$gardener]]></code>
      <code><![CDATA['\Mockery\Dave123']]></code>
    </UndefinedClass>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturn]]></code>
    </UndefinedMagicMethod>
    <UndefinedMethod>
      <code><![CDATA[getDave]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[NamedMockTest]]></code>
    </UnusedClass>
    <UnusedVariable>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </UnusedVariable>
  </file>
  <file src="tests/Unit/Mockery/ProxyMockingTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame(1, $mock->anyMethod())]]></code>
      <code><![CDATA[self::assertSame(1, $mock->anyMethod())]]></code>
      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>
      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>
    </MissingThrowsDocblock>
    <UndefinedInterfaceMethod>
      <code><![CDATA[anyMethod]]></code>
      <code><![CDATA[theAnswer]]></code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code><![CDATA[ProxyMockingTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/ReflectorTest.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$class]]></code>
    </ArgumentTypeCoercion>
    <InternalClass>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
      <code><![CDATA[Reflector::isReservedWord($type)]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
      <code><![CDATA[Reflector::isReservedWord($type)]]></code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame($expectedTypeHint, Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertSame($expectedTypeHint, Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertTrue(Reflector::isReservedWord($type))]]></code>
      <code><![CDATA[self::assertTrue(Reflector::isReservedWord($type))]]></code>
    </MissingThrowsDocblock>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$refClass->getMethods()[0]]]></code>
      <code><![CDATA[$refMethod->getParameters()[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <UnusedClass>
      <code><![CDATA[ReflectorTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/SpyTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>
      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>
    </MissingThrowsDocblock>
    <TooFewArguments>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
      <code><![CDATA[shouldNotHaveReceived]]></code>
    </TooFewArguments>
    <UndefinedInterfaceMethod>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[myMethod]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[twice]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
      <code><![CDATA[with]]></code>
    </UndefinedInterfaceMethod>
    <UnusedClass>
      <code><![CDATA[SpyTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/Mockery/TraitsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>
      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>
      <code><![CDATA[self::assertSame('baz', $trait->baz())]]></code>
      <code><![CDATA[self::assertSame('baz', $trait->baz())]]></code>
      <code><![CDATA[self::assertSame(123, $trait->baz())]]></code>
      <code><![CDATA[self::assertSame(123, $trait->baz())]]></code>
    </MissingThrowsDocblock>
    <UndefinedClass>
      <code><![CDATA[$trait]]></code>
      <code><![CDATA[$trait]]></code>
      <code><![CDATA[$trait]]></code>
      <code><![CDATA[$trait]]></code>
    </UndefinedClass>
    <UnusedClass>
      <code><![CDATA[TraitsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP73/MockClassWithFinalWakeupTest.php">
    <MissingOverrideAttribute>
      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>
      <code><![CDATA[protected function mockeryTestTearDown(): void]]></code>
    </MissingOverrideAttribute>
    <MissingPropertyType>
      <code><![CDATA[$container]]></code>
    </MissingPropertyType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(SubclassWithFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(SubclassWithFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(SubclassWithFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalWakeup::class, $mock)]]></code>
      <code><![CDATA[self::assertNull($mock->__wakeup())]]></code>
      <code><![CDATA[self::assertNull($mock->__wakeup())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>
      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code><![CDATA[$mock]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mock]]></code>
      <code><![CDATA[mockery_close]]></code>
    </MixedMethodCall>
    <UnusedClass>
      <code><![CDATA[MockClassWithFinalWakeupTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP73/MockingOldStyleConstructorTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(OldStyleConstructor::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(OldStyleConstructor::class, $double)]]></code>
      <code><![CDATA[self::assertInstanceOf(OldStyleConstructor::class, $double)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[MockingOldStyleConstructorTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP73/MockingVoidMethodsTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(MethodWithVoidReturnType::class, \mock(MethodWithVoidReturnType::class))]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithVoidReturnType::class, \mock(MethodWithVoidReturnType::class))]]></code>
      <code><![CDATA[self::assertInstanceOf(MethodWithVoidReturnType::class, \mock(MethodWithVoidReturnType::class))]]></code>
    </MissingThrowsDocblock>
    <UndefinedMethod>
      <code><![CDATA[expects]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingVoidMethodsTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP73/TestCase1328Test.php">
    <LessSpecificReturnType>
      <code><![CDATA[void]]></code>
      <code><![CDATA[void]]></code>
    </LessSpecificReturnType>
    <MixedMethodCall>
      <code><![CDATA[once]]></code>
      <code><![CDATA[times]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
      <code><![CDATA[shouldNotReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[TestCase1328Test]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP73/TestCase1404Test.php">
    <InvalidReturnType>
      <code><![CDATA[Generator<string,list<string>>]]></code>
    </InvalidReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[TestCase1404Test]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP73/WithCustomFormatterExpectationTest.php">
    <MissingClosureParamType>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$object]]></code>
      <code><![CDATA[$object]]></code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[function ($class, $nesting) {]]></code>
    </MissingClosureReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[protected function setUp(): void]]></code>
    </MissingOverrideAttribute>
    <MissingParamType>
      <code><![CDATA[$expected]]></code>
      <code><![CDATA[$obj]]></code>
      <code><![CDATA[$object]]></code>
      <code><![CDATA[$shouldContains]]></code>
      <code><![CDATA[$shouldNotContains]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame($expected, $formatted ? $formatted['formatter'] : null)]]></code>
      <code><![CDATA[self::assertSame($expected, $formatted ? $formatted['formatter'] : null)]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$containString]]></code>
      <code><![CDATA[$containString]]></code>
      <code><![CDATA[$object]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$formatted['formatter']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code><![CDATA[$containString]]></code>
      <code><![CDATA[$containString]]></code>
      <code><![CDATA[$formatted]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[getArrayProperty]]></code>
      <code><![CDATA[getArrayProperty]]></code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$object->stringProperty]]></code>
      <code><![CDATA[$object->stringProperty]]></code>
    </MixedPropertyFetch>
    <UnusedClass>
      <code><![CDATA[WithCustomFormatterExpectationTest]]></code>
    </UnusedClass>
    <UnusedClosureParam>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$nesting]]></code>
      <code><![CDATA[$nesting]]></code>
    </UnusedClosureParam>
  </file>
  <file src="tests/Unit/PHP73/WithFormatterExpectationTest.php">
    <MissingParamType>
      <code><![CDATA[$args]]></code>
      <code><![CDATA[$expected]]></code>
    </MissingParamType>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame($expected, Mockery::formatObjects($args))]]></code>
      <code><![CDATA[self::assertSame($expected, Mockery::formatObjects($args))]]></code>
      <code><![CDATA[self::assertSame(\mb_strpos($string, 'Missing argument 1 for'), false)]]></code>
      <code><![CDATA[self::assertSame(\mb_strpos($string, 'Missing argument 1 for'), false)]]></code>
      <code><![CDATA[self::assertSame(\mb_strpos($string, 'excludedProperty'), false)]]></code>
      <code><![CDATA[self::assertSame(\mb_strpos($string, 'excludedProperty'), false)]]></code>
      <code><![CDATA[self::assertSame(\mb_strpos($string, 'getExcluded'), false)]]></code>
      <code><![CDATA[self::assertSame(\mb_strpos($string, 'getExcluded'), false)]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$args]]></code>
    </MixedArgument>
    <MixedMethodCall>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[WithFormatterExpectationTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP74/TestCase1132Test.php">
    <ArgumentTypeCoercion>
      <code><![CDATA['TestCase1132']]></code>
    </ArgumentTypeCoercion>
    <MixedMethodCall>
      <code><![CDATA[saveDummy]]></code>
    </MixedMethodCall>
    <UndefinedClass>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </UndefinedClass>
    <UnusedClass>
      <code><![CDATA[TestCase1132Test]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP74/TestCase1402Test.php">
    <InvalidArgument>
      <code><![CDATA[[1]]]></code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame(2, $banana->test())]]></code>
      <code><![CDATA[self::assertSame(2, $banana->test())]]></code>
    </MissingThrowsDocblock>
    <MixedAssignment>
      <code><![CDATA[$banana]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[andReturns]]></code>
      <code><![CDATA[test]]></code>
    </MixedMethodCall>
    <UndefinedMethod>
      <code><![CDATA[makePartial]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[TestCase1402Test]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP80/MockWithClosureAsLastArgumentTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(PHP80TestInterface::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(PHP80TestInterface::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(PHP80TestInterface::class, $mock)]]></code>
      <code><![CDATA[self::assertSame('#BlackLivesMatter', $mock->blm())]]></code>
      <code><![CDATA[self::assertSame('#BlackLivesMatter', $mock->blm())]]></code>
    </MissingThrowsDocblock>
    <UndefinedInterfaceMethod>
      <code><![CDATA[blm]]></code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code><![CDATA[andReturn]]></code>
    </UndefinedMagicMethod>
    <UnusedClass>
      <code><![CDATA[MockWithClosureAsLastArgumentTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP80/MockingMethodsWithStaticReturnTypeTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertSame($mock, $mock->returnType())]]></code>
      <code><![CDATA[self::assertSame($mock, $mock->returnType())]]></code>
    </MissingThrowsDocblock>
    <UndefinedMethod>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[MockingMethodsWithStaticReturnTypeTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP80/Php80LanguageFeaturesTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(Iterator::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Iterator::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Iterator::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(IteratorAggregate::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(IteratorAggregate::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(IteratorAggregate::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, $mock->foo())]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, $mock->foo())]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, $mock->foo())]]></code>
      <code><![CDATA[self::assertIsObject($mock->foo())]]></code>
      <code><![CDATA[self::assertIsObject($mock->foo())]]></code>
      <code><![CDATA[self::assertNotInstanceOf(Iterator::class, $mock)]]></code>
      <code><![CDATA[self::assertNotInstanceOf(Iterator::class, $mock)]]></code>
      <code><![CDATA[self::assertNotInstanceOf(Iterator::class, $mock)]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
      <code><![CDATA[self::assertNull($mock->foo())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
    </MixedMethodCall>
    <RedundantCondition>
      <code><![CDATA[assertIsObject]]></code>
    </RedundantCondition>
    <UndefinedMethod>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[allows]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[Php80LanguageFeaturesTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP80/TestCase1414Test.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf($class::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf($class::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf($class::class, $mock)]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[TestCase1414Test]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP81/Php81LanguageFeaturesTest.php">
    <InvalidArgument>
      <code><![CDATA[Mockery::mock(IntersectionTypeHelper1Interface::class)]]></code>
    </InvalidArgument>
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(ClassWithNewInInitializer::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(ClassWithNewInInitializer::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(ClassWithNewInInitializer::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(PDO::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(PDO::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(PDO::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Serializable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Serializable::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Serializable::class, $mock)]]></code>
      <code><![CDATA[self::assertNull($mock->getTimestamp())]]></code>
      <code><![CDATA[self::assertNull($mock->getTimestamp())]]></code>
      <code><![CDATA[self::assertSame('it works', (new HandlerClass())->doStuff($class))]]></code>
      <code><![CDATA[self::assertSame('it works', (new HandlerClass())->doStuff($class))]]></code>
      <code><![CDATA[self::assertSame(0, $mock->exec('select * from foo.bar'))]]></code>
      <code><![CDATA[self::assertSame(0, $mock->exec('select * from foo.bar'))]]></code>
      <code><![CDATA[self::assertSame(0, $mock->getTimestamp())]]></code>
      <code><![CDATA[self::assertSame(0, $mock->getTimestamp())]]></code>
      <code><![CDATA[self::assertSame(0.0, $mock->getTimestamp())]]></code>
      <code><![CDATA[self::assertSame(0.0, $mock->getTimestamp())]]></code>
      <code><![CDATA[self::assertSame(123, \pcntl_wexitstatus($status))]]></code>
      <code><![CDATA[self::assertSame(123, \pcntl_wexitstatus($status))]]></code>
      <code><![CDATA[self::assertSame(SimpleEnum::first, $mock->enum)]]></code>
      <code><![CDATA[self::assertSame(SimpleEnum::first, $mock->enum)]]></code>
      <code><![CDATA[self::markTestSkipped("Couldn't fork for exit test")]]></code>
      <code><![CDATA[self::markTestSkipped("Couldn't fork for exit test")]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$class]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$mock]]></code>
      <code><![CDATA[$mock]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[exits]]></code>
      <code><![CDATA[foo]]></code>
      <code><![CDATA[getMock]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
      <code><![CDATA[throws]]></code>
      <code><![CDATA[with]]></code>
    </MixedMethodCall>
    <TypeDoesNotContainNull>
      <code><![CDATA[assertNull]]></code>
    </TypeDoesNotContainNull>
    <UndefinedMethod>
      <code><![CDATA[allows]]></code>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[makePartial]]></code>
      <code><![CDATA[shouldReceive]]></code>
      <code><![CDATA[shouldReceive]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[Php81LanguageFeaturesTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP82/Php82LanguageFeaturesTest.php">
    <InternalClass>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>
    </InternalMethod>
    <MissingThrowsDocblock>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[getMethod]]></code>
      <code><![CDATA[self::assertFalse($mock->testFalseMethod())]]></code>
      <code><![CDATA[self::assertFalse($mock->testFalseMethod())]]></code>
      <code><![CDATA[self::assertInstanceOf(HasNullReturnType::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasNullReturnType::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasNullReturnType::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasReservedWordFalse::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasReservedWordFalse::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasReservedWordFalse::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasReservedWordTrue::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasReservedWordTrue::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(HasReservedWordTrue::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $expectedType)]]></code>
      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $expectedType)]]></code>
      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $expectedType)]]></code>
      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $type)]]></code>
      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $type)]]></code>
      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $type)]]></code>
      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>
      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>
      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>
      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>
      <code><![CDATA[self::assertSame('bar', $class->foo)]]></code>
      <code><![CDATA[self::assertSame('bar', $class->foo)]]></code>
      <code><![CDATA[self::assertSame('iterable|\stdClass|string', Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertSame('iterable|\stdClass|string', Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertSame('iterable|object', Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertSame('iterable|object', Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertSame('iterable|object|string', Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertSame('iterable|object|string', Reflector::getTypeHint($refParam))]]></code>
      <code><![CDATA[self::assertTrue($mock->testTrueMethod())]]></code>
      <code><![CDATA[self::assertTrue($mock->testTrueMethod())]]></code>
    </MissingThrowsDocblock>
    <MixedMethodCall>
      <code><![CDATA[once]]></code>
      <code><![CDATA[once]]></code>
    </MixedMethodCall>
    <PossiblyNullReference>
      <code><![CDATA[__toString]]></code>
      <code><![CDATA[__toString]]></code>
    </PossiblyNullReference>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$expectedMethod
            ->getParameters()[0]]]></code>
      <code><![CDATA[$expectedReflectionClass->getMethods()[0]]]></code>
      <code><![CDATA[$expectedReflectionClass->getMethods()[0]]]></code>
      <code><![CDATA[$refClass->getMethods()[0]]]></code>
      <code><![CDATA[$refClass->getMethods()[0]]]></code>
      <code><![CDATA[$refClass->getMethods()[0]]]></code>
      <code><![CDATA[$refMethod->getParameters()[0]]]></code>
      <code><![CDATA[$refMethod->getParameters()[0]]]></code>
      <code><![CDATA[$refMethod->getParameters()[0]]]></code>
      <code><![CDATA[$reflectionClass->getMethod($expectedMethod->getName())
            ->getParameters()[0]]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <RedundantCondition>
      <code><![CDATA[assertFalse]]></code>
      <code><![CDATA[assertTrue]]></code>
    </RedundantCondition>
    <UndefinedClass>
      <code><![CDATA[$class->foo]]></code>
      <code><![CDATA[$class->foo]]></code>
    </UndefinedClass>
    <UndefinedMethod>
      <code><![CDATA[expects]]></code>
      <code><![CDATA[expects]]></code>
    </UndefinedMethod>
    <UnusedClass>
      <code><![CDATA[Php82LanguageFeaturesTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP82/TestCase1439Test.php">
    <MixedMethodCall>
      <code><![CDATA[andReturn]]></code>
      <code><![CDATA[withArgs]]></code>
    </MixedMethodCall>
    <UndefinedMagicMethod>
      <code><![CDATA[expects]]></code>
    </UndefinedMagicMethod>
    <UnusedClass>
      <code><![CDATA[TestCase1439Test]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP83/Php83LanguageFeaturesTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(Classes::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Classes::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Classes::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Interfaces::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Interfaces::class, $mock)]]></code>
      <code><![CDATA[self::assertInstanceOf(Interfaces::class, $mock)]]></code>
      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::CONSTANT)]]></code>
      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::CONSTANT)]]></code>
      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::{$constant})]]></code>
      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::{$constant})]]></code>
      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::CONSTANT)]]></code>
      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::CONSTANT)]]></code>
      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::{$constant})]]></code>
      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::{$constant})]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock->foo())]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock->foo())]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>
      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>
    </MissingThrowsDocblock>
    <UndefinedClass>
      <code><![CDATA[$mock]]></code>
    </UndefinedClass>
    <UnusedClass>
      <code><![CDATA[Php83LanguageFeaturesTest]]></code>
    </UnusedClass>
  </file>
  <file src="tests/Unit/PHP84/Php84LanguageFeaturesTest.php">
    <MissingThrowsDocblock>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, Mockery::mock(stdClass::class))]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, Mockery::mock(stdClass::class))]]></code>
      <code><![CDATA[self::assertInstanceOf(stdClass::class, Mockery::mock(stdClass::class))]]></code>
    </MissingThrowsDocblock>
    <UnusedClass>
      <code><![CDATA[Php84LanguageFeaturesTest]]></code>
    </UnusedClass>
  </file>
</files>
